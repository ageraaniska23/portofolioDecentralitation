{
  "version": 3,
  "sources": ["../../thirdweb/src/extensions/erc1155/drops/write/claimTo.ts"],
  "sourcesContent": ["import type { Address } from \"abitype\";\nimport type { BaseTransactionOptions } from \"../../../../transaction/types.js\";\nimport { getClaimParams } from \"../../../../utils/extensions/drops/get-claim-params.js\";\nimport { claim } from \"../../__generated__/IDrop1155/write/claim.js\";\n\n/**\n * @extension ERC1155\n */\nexport type ClaimToParams = {\n  to: Address;\n  tokenId: bigint;\n  quantity: bigint;\n  from?: Address;\n};\n\n/**\n * Claim ERC1155 NFTs to a specified address\n * @param options - The options for the transaction\n * @extension ERC1155\n * @example\n * ```ts\n * import { claimTo } from \"thirdweb/extensions/erc1155\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const transaction = claimTo({\n *   contract,\n *   to: \"0x...\",\n *   tokenId: 0n,\n *   quantity: 1n,\n * });\n *\n * await sendTransaction({ transaction, account });\n * ```\n * @throws If no claim condition is set\n * @returns The prepared transaction\n */\nexport function claimTo(options: BaseTransactionOptions<ClaimToParams>) {\n  return claim({\n    contract: options.contract,\n    async asyncParams() {\n      const params = await getClaimParams({\n        type: \"erc1155\",\n        contract: options.contract,\n        to: options.to,\n        quantity: options.quantity,\n        from: options.from,\n        tokenId: options.tokenId,\n      });\n\n      return {\n        ...params,\n        tokenId: options.tokenId,\n      };\n    },\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCM,SAAU,QAAQ,SAA8C;AACpE,SAAO,MAAM;IACX,UAAU,QAAQ;IAClB,MAAM,cAAW;AACf,YAAM,SAAS,MAAM,eAAe;QAClC,MAAM;QACN,UAAU,QAAQ;QAClB,IAAI,QAAQ;QACZ,UAAU,QAAQ;QAClB,MAAM,QAAQ;QACd,SAAS,QAAQ;OAClB;AAED,aAAO;QACL,GAAG;QACH,SAAS,QAAQ;;IAErB;GACD;AACH;",
  "names": []
}
