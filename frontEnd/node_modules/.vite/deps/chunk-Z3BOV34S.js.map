{
  "version": 3,
  "sources": ["../../thirdweb/src/utils/encoding/helpers/trim.ts", "../../thirdweb/src/transaction/serialize-transaction.ts", "../../thirdweb/src/utils/signatures/sign.ts", "../../thirdweb/src/transaction/actions/sign-transaction.ts"],
  "sourcesContent": ["import type { Hex } from \"./is-hex.js\";\n\ntype TrimOptions = {\n  dir?: \"left\" | \"right\";\n};\nexport type TrimReturnType<TValue extends Uint8Array | Hex> = TValue extends Hex\n  ? Hex\n  : Uint8Array;\n\n/**\n * Trims leading or trailing zeros from a hexadecimal string or byte array.\n *\n * @param hexOrBytes - The hexadecimal string or byte array to trim.\n * @param options - The options for trimming. Default is to trim leading zeros.\n * @returns The trimmed hexadecimal string or byte array.\n * @internal\n */\nexport function trim<TValue extends Uint8Array | Hex>(\n  hexOrBytes: TValue,\n  { dir = \"left\" }: TrimOptions = {},\n): TrimReturnType<TValue> {\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  let data: any =\n    typeof hexOrBytes === \"string\" ? hexOrBytes.replace(\"0x\", \"\") : hexOrBytes;\n\n  let sliceLength = 0;\n  for (let i = 0; i < data.length - 1; i++) {\n    if (data[dir === \"left\" ? i : data.length - i - 1].toString() === \"0\") {\n      sliceLength++;\n    } else {\n      break;\n    }\n  }\n  data =\n    dir === \"left\"\n      ? data.slice(sliceLength)\n      : data.slice(0, data.length - sliceLength);\n\n  if (typeof hexOrBytes === \"string\") {\n    if (data.length === 1 && dir === \"right\") {\n      data = `${data}0`;\n    }\n    return `0x${\n      data.length % 2 === 1 ? `0${data}` : data\n    }` as TrimReturnType<TValue>;\n  }\n  return data as TrimReturnType<TValue>;\n}\n", "import {\n  type ExactPartial,\n  type SerializedTransactionReturnType,\n  type Signature,\n  type TransactionSerializable,\n  type TransactionSerializableEIP1559,\n  type TransactionSerializableEIP2930,\n  type TransactionSerializableEIP4844,\n  type TransactionSerializableLegacy,\n  type TransactionSerializedEIP1559,\n  type TransactionSerializedEIP2930,\n  type TransactionSerializedLegacy,\n  serializeTransaction as _serializeTransaction,\n  assertTransactionEIP1559,\n  assertTransactionEIP2930,\n  assertTransactionLegacy,\n  serializeAccessList,\n  toRlp,\n} from \"viem\";\nimport { trim } from \"../utils/encoding/helpers/trim.js\";\nimport { type Hex, toHex } from \"../utils/encoding/hex.js\";\n\nexport type SerializeTransactionOptions<\n  _transaction extends TransactionSerializable,\n> = {\n  transaction: _transaction;\n};\n\n/**\n * Serializes a legacy, EIP-1559, EIP-2930, or EIP-4844 transaction object.\n *\n * @param options - The serialization options.\n * @param options.transaction - The transaction object to be serialized, including the signature parameters if necessary.\n * @returns The serialized transaction.\n * @throws An error if the provided transaction object is invalid.\n * @transaction\n * @example\n * ```ts\n * import { serializeTransaction } from \"thirdweb\";\n *\n * const serializedTransaction = serializeTransaction({ transaction: {\n *    to: \"0x\",\n *    value: 0n,\n *  }\n * });\n * ```\n */\nexport function serializeTransaction<\n  _transaction extends TransactionSerializable,\n>(\n  options: SerializeTransactionOptions<_transaction>,\n): SerializedTransactionReturnType<_transaction> {\n  const { transaction } = options;\n\n  if (\n    transaction.type === \"eip4844\" || // explicit type checks required for viem parity\n    typeof transaction.blobs !== \"undefined\" ||\n    typeof transaction.blobVersionedHashes !== \"undefined\" ||\n    typeof transaction.maxFeePerBlobGas !== \"undefined\" ||\n    typeof transaction.sidecars !== \"undefined\"\n  ) {\n    // default to viem's 4844 serialization until we have blob utilities\n    return _serializeTransaction<TransactionSerializableEIP4844>(\n      transaction,\n    ) as SerializedTransactionReturnType<_transaction>;\n  }\n\n  if (\n    transaction.type === \"eip1559\" ||\n    typeof transaction.maxFeePerGas !== \"undefined\" ||\n    typeof transaction.maxPriorityFeePerGas !== \"undefined\"\n  ) {\n    return serializeEIP1559Transaction({\n      transaction,\n    }) as SerializedTransactionReturnType<_transaction>;\n  }\n\n  if (\n    transaction.type === \"eip2930\" ||\n    (typeof transaction.gasPrice !== \"undefined\" &&\n      typeof transaction.accessList !== \"undefined\")\n  ) {\n    return serializeEIP2930Transaction({\n      transaction,\n    }) as SerializedTransactionReturnType<_transaction>;\n  }\n\n  if (\n    transaction.type === \"legacy\" ||\n    typeof transaction.gasPrice !== \"undefined\"\n  ) {\n    return serializeTransactionLegacy({\n      transaction: transaction as TransactionSerializableLegacy,\n    }) as SerializedTransactionReturnType<_transaction>;\n  }\n\n  throw new Error(\n    `Invalid transaction to serialize.\\n\\n${JSON.stringify(\n      transaction,\n      (_, v) => (typeof v === \"bigint\" ? `${v.toString()}n` : v),\n      2,\n    )}`,\n  );\n}\n\ntype SerializeEIP1559TransactionOptions = {\n  transaction: TransactionSerializableEIP1559;\n};\n\nfunction serializeEIP1559Transaction(\n  options: SerializeEIP1559TransactionOptions,\n): TransactionSerializedEIP1559 {\n  assertTransactionEIP1559(options.transaction);\n\n  const {\n    transaction: {\n      chainId,\n      gas,\n      nonce,\n      to,\n      value,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      accessList,\n      data,\n      r,\n      s,\n      v,\n      yParity,\n    },\n  } = options;\n\n  const serializedAccessList = serializeAccessList(accessList);\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : \"0x\",\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : \"0x\",\n    maxFeePerGas ? toHex(maxFeePerGas) : \"0x\",\n    gas ? toHex(gas) : \"0x\",\n    // To fix when migrating to our own version of TransactionSerializable (the viem type is downgraded from Address to string when importing)\n    (to ?? \"0x\") as Hex,\n    value ? toHex(value) : \"0x\",\n    data ?? \"0x\",\n    serializedAccessList,\n    ...toYParitySignatureArray({ r, s, v, yParity }),\n  ];\n\n  return `0x02${toRlp(serializedTransaction).slice(2)}`;\n}\n\ntype SerializeEIP2930TransactionOptions = {\n  transaction: TransactionSerializableEIP2930;\n};\n\nfunction serializeEIP2930Transaction(\n  options: SerializeEIP2930TransactionOptions,\n): TransactionSerializedEIP2930 {\n  assertTransactionEIP2930(options.transaction);\n\n  const {\n    transaction: {\n      chainId,\n      gas,\n      gasPrice,\n      nonce,\n      to,\n      value,\n      accessList,\n      data,\n      r,\n      s,\n      v,\n      yParity,\n    },\n  } = options;\n\n  const serializedAccessList = serializeAccessList(accessList);\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : \"0x\",\n    gasPrice ? toHex(gasPrice) : \"0x\",\n    gas ? toHex(gas) : \"0x\",\n    (to ?? \"0x\") as Hex,\n    value ? toHex(value) : \"0x\",\n    data ?? \"0x\",\n    serializedAccessList,\n    ...toYParitySignatureArray({ r, s, v, yParity }),\n  ];\n\n  return `0x01${toRlp(serializedTransaction).slice(2)}`;\n}\n\ntype SerializeLegacyTransactionOptions = {\n  transaction: TransactionSerializableLegacy;\n};\n\nfunction serializeTransactionLegacy(\n  options: SerializeLegacyTransactionOptions,\n): TransactionSerializedLegacy {\n  assertTransactionLegacy(options.transaction);\n\n  const {\n    chainId = 0,\n    gas,\n    data,\n    nonce,\n    to,\n    value,\n    gasPrice,\n    r,\n    s,\n    v,\n  } = options.transaction;\n\n  let serializedTransaction = [\n    nonce ? toHex(nonce) : \"0x\",\n    gasPrice ? toHex(gasPrice) : \"0x\",\n    gas ? toHex(gas) : \"0x\",\n    (to ?? \"0x\") as Hex,\n    value ? toHex(value) : \"0x\",\n    data ?? \"0x\",\n  ];\n\n  if (typeof v !== \"undefined\") {\n    const v_ = (() => {\n      // EIP-155 (inferred chainId)\n      if (v >= 35n) {\n        const inferredChainId = (v - 35n) / 2n;\n        if (inferredChainId > 0) return v;\n        return 27n + (v === 35n ? 0n : 1n);\n      }\n\n      // EIP-155 (explicit chainId)\n      if (chainId > 0) return BigInt(chainId * 2) + BigInt(35n + v - 27n);\n\n      // Pre-EIP-155 (no chainId)\n      const v_ = 27n + (v === 27n ? 0n : 1n);\n      if (v !== v_) throw new Error(`Invalid legacy signature value v: ${v}`);\n      return v_;\n    })();\n\n    if (typeof r === \"undefined\")\n      throw new Error(`Invalid legacy signature value r: ${r}`);\n    if (typeof s === \"undefined\")\n      throw new Error(`Invalid legacy signature value s: ${s}`);\n\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(v_),\n      r === \"0x00\" ? \"0x\" : r,\n      s === \"0x00\" ? \"0x\" : s,\n    ];\n  } else if (chainId > 0) {\n    serializedTransaction = [\n      ...serializedTransaction,\n      toHex(chainId),\n      \"0x\",\n      \"0x\",\n    ];\n  }\n\n  return toRlp(serializedTransaction) as TransactionSerializedLegacy;\n}\n\nexport function toYParitySignatureArray(\n  signature: ExactPartial<Signature>,\n): Hex[] {\n  const { v, yParity } = signature;\n\n  if (typeof signature.r === \"undefined\") return [];\n  if (typeof signature.s === \"undefined\") return [];\n\n  if (typeof v === \"undefined\" && typeof yParity === \"undefined\") return [];\n\n  const r = trim(signature.r);\n  const s = trim(signature.s);\n\n  const yParity_ = (() => {\n    if (yParity === 1 || yParity === 0) return yParity ? toHex(1) : \"0x\";\n    if (typeof yParity !== \"undefined\")\n      throw new Error(`Invalid signature value for yParity: ${yParity}`);\n\n    if (v === 0n || v === 27n) return \"0x\";\n    if (v === 1n || v === 28n) return toHex(1);\n    throw new Error(`Invalid signature value v: ${v}`);\n  })();\n  return [yParity_, r === \"0x00\" ? \"0x\" : r, s === \"0x00\" ? \"0x\" : s];\n}\n", "import { secp256k1 } from \"@noble/curves/secp256k1\";\nimport type { Signature } from \"viem\";\n\nimport { type Hex, toHex } from \"../encoding/hex.js\";\n\n/**\n * Options for signing a transaction hash.\n */\nexport type SignOptions = {\n  hash: Hex;\n  privateKey: Hex;\n};\n\n/**\n * Generates the signature for the provided transaction hash.\n * @param options - The options for signing.\n * @param options.hash - The hash to be signed.\n * @param options.privateKey - The private key to sign the hash with.\n * @returns The transaction signature.\n * @example\n * ```ts\n * import { sign } from \"thirdweb/utils\";\n *\n * const signature = sign({\n *   hash: \"0x\",\n *   privateKey: \"0x\",\n * });\n * ```\n * @utils\n */\nexport function sign({ hash, privateKey }: SignOptions): Signature {\n  const { r, s, recovery } = secp256k1.sign(hash.slice(2), privateKey.slice(2));\n  return {\n    r: toHex(r, { size: 32 }),\n    s: toHex(s, { size: 32 }),\n    v: recovery ? 28n : 27n,\n    yParity: recovery,\n  };\n}\n", "import type { TransactionSerializable } from \"viem\";\nimport type { Hex } from \"../../utils/encoding/hex.js\";\nimport { keccak256 } from \"../../utils/hashing/keccak256.js\";\nimport { sign } from \"../../utils/signatures/sign.js\";\nimport { serializeTransaction } from \"../serialize-transaction.js\";\n\nexport type SignTransactionOptions = {\n  transaction: TransactionSerializable;\n  privateKey: Hex;\n  // TODO: Add optional custom serializer here\n};\n\n/**\n * Signs a transaction to be sent to a node.\n * @param options The options for signing.\n * @param options.transaction - The transaction object to sign\n * @param options.privateKey - The account private key\n * @returns The signed transaction as a hex string\n * @example\n * ```ts\n * import { signTransaction } from \"thirdweb\";\n * signTransaction({\n *   transaction: {\n *     ...\n *   },\n *   privateKey: \"0x...\",\n * });\n * ```\n * @transaction\n */\nexport function signTransaction({\n  transaction,\n  privateKey,\n}: SignTransactionOptions): Hex {\n  if (transaction.type === \"eip4844\") {\n    transaction = { ...transaction, sidecars: false };\n  }\n\n  const serializedTransaction = serializeTransaction({ transaction });\n\n  const signature = sign({\n    hash: keccak256(serializedTransaction),\n    privateKey: privateKey,\n  });\n  return serializeTransaction({\n    transaction: { ...transaction, ...signature },\n  });\n}\n"],
  "mappings": "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",
  "names": ["serializeTransaction", "v_", "serializeTransaction"]
}
