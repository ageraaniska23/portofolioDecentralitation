{
  "version": 3,
  "sources": ["../../thirdweb/src/extensions/erc1155/__generated__/IERC1155/read/isApprovedForAll.ts"],
  "sourcesContent": ["import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"isApprovedForAll\" function.\n */\nexport type IsApprovedForAllParams = {\n  owner: AbiParameterToPrimitiveType<{ type: \"address\"; name: \"_owner\" }>;\n  operator: AbiParameterToPrimitiveType<{ type: \"address\"; name: \"_operator\" }>;\n};\n\nexport const FN_SELECTOR = \"0xe985e9c5\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"address\",\n    name: \"_owner\",\n  },\n  {\n    type: \"address\",\n    name: \"_operator\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"bool\",\n  },\n] as const;\n\n/**\n * Checks if the `isApprovedForAll` method is supported by the given contract.\n * @param contract The ThirdwebContract.\n * @returns A promise that resolves to a boolean indicating if the `isApprovedForAll` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isIsApprovedForAllSupported } from \"thirdweb/extensions/erc1155\";\n *\n * const supported = await isIsApprovedForAllSupported(contract);\n * ```\n */\nexport async function isIsApprovedForAllSupported(\n  contract: ThirdwebContract<any>,\n) {\n  return detectMethod({\n    contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"isApprovedForAll\" function.\n * @param options - The options for the isApprovedForAll function.\n * @returns The encoded ABI parameters.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeIsApprovedForAllParams } \"thirdweb/extensions/erc1155\";\n * const result = encodeIsApprovedForAllParams({\n *  owner: ...,\n *  operator: ...,\n * });\n * ```\n */\nexport function encodeIsApprovedForAllParams(options: IsApprovedForAllParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.owner, options.operator]);\n}\n\n/**\n * Encodes the \"isApprovedForAll\" function into a Hex string with its parameters.\n * @param options - The options for the isApprovedForAll function.\n * @returns The encoded hexadecimal string.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeIsApprovedForAll } \"thirdweb/extensions/erc1155\";\n * const result = encodeIsApprovedForAll({\n *  owner: ...,\n *  operator: ...,\n * });\n * ```\n */\nexport function encodeIsApprovedForAll(options: IsApprovedForAllParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeIsApprovedForAllParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the isApprovedForAll function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC1155\n * @example\n * ```ts\n * import { decodeIsApprovedForAllResult } from \"thirdweb/extensions/erc1155\";\n * const result = decodeIsApprovedForAllResult(\"...\");\n * ```\n */\nexport function decodeIsApprovedForAllResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"isApprovedForAll\" function on the contract.\n * @param options - The options for the isApprovedForAll function.\n * @returns The parsed result of the function call.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isApprovedForAll } from \"thirdweb/extensions/erc1155\";\n *\n * const result = await isApprovedForAll({\n *  contract,\n *  owner: ...,\n *  operator: ...,\n * });\n *\n * ```\n */\nexport async function isApprovedForAll(\n  options: BaseTransactionOptions<IsApprovedForAllParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.owner, options.operator],\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBO,IAAM,cAAc;AAC3B,IAAM,YAAY;EAChB;IACE,MAAM;IACN,MAAM;;EAER;IACE,MAAM;IACN,MAAM;;;AAGV,IAAM,aAAa;EACjB;IACE,MAAM;;;AAgBV,eAAsB,4BACpB,UAA+B;AAE/B,SAAO,aAAa;IAClB;IACA,QAAQ,CAAC,aAAa,WAAW,UAAU;GAC5C;AACH;AAgBM,SAAU,6BAA6B,SAA+B;AAC1E,SAAO,oBAAoB,WAAW,CAAC,QAAQ,OAAO,QAAQ,QAAQ,CAAC;AACzE;AAgBM,SAAU,uBAAuB,SAA+B;AAGpE,SAAQ,cACN,6BAA6B,OAAO,EAAE,MACpC,CAAC;AAEP;AAaM,SAAU,6BAA6B,QAAW;AACtD,SAAO,oBAAoB,YAAY,MAAM,EAAE,CAAC;AAClD;AAmBA,eAAsB,iBACpB,SAAuD;AAEvD,SAAO,aAAa;IAClB,UAAU,QAAQ;IAClB,QAAQ,CAAC,aAAa,WAAW,UAAU;IAC3C,QAAQ,CAAC,QAAQ,OAAO,QAAQ,QAAQ;GACzC;AACH;",
  "names": []
}
