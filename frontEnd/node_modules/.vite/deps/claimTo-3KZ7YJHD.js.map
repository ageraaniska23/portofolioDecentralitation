{
  "version": 3,
  "sources": ["../../thirdweb/src/extensions/erc20/drops/write/claimTo.ts"],
  "sourcesContent": ["import type { Address } from \"abitype\";\nimport type { BaseTransactionOptions } from \"../../../../transaction/types.js\";\nimport { getClaimParams } from \"../../../../utils/extensions/drops/get-claim-params.js\";\nimport { claim } from \"../../__generated__/IDropERC20/write/claim.js\";\nimport { decimals } from \"../../read/decimals.js\";\n\n/**\n * Represents the parameters for claiming an ERC20 token.\n * @extension ERC20\n */\nexport type ClaimToParams = {\n  to: Address;\n  from?: Address;\n} & ({ quantityInWei: bigint } | { quantity: string });\n\n/**\n * Claim ERC20 NFTs to a specified address\n * @param options - The options for the transaction\n * @extension ERC20\n * @example\n * ```ts\n * import { claimTo } from \"thirdweb/extensions/erc20\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const transaction = claimTo({\n *   contract,\n *   to: \"0x...\",\n *   quantity: 100n,\n * });\n *\n * await sendTransaction({ transaction, account });\n * ```\n * @throws If no claim condition is set\n * @returns A promise that resolves with the submitted transaction hash.\n */\nexport function claimTo(options: BaseTransactionOptions<ClaimToParams>) {\n  return claim({\n    contract: options.contract,\n    asyncParams: async () => {\n      const quantity = await (async () => {\n        if (\"quantityInWei\" in options) {\n          return options.quantityInWei;\n        }\n\n        const { toUnits } = await import(\"../../../../utils/units.js\");\n        return toUnits(\n          options.quantity,\n          await decimals({ contract: options.contract }),\n        );\n      })();\n\n      return getClaimParams({\n        type: \"erc20\",\n        contract: options.contract,\n        to: options.to,\n        quantity,\n        from: options.from,\n        tokenDecimals: await decimals({ contract: options.contract }),\n      });\n    },\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCM,SAAU,QAAQ,SAA8C;AACpE,SAAO,MAAM;IACX,UAAU,QAAQ;IAClB,aAAa,YAAW;AACtB,YAAM,WAAW,OAAO,YAAW;AACjC,YAAI,mBAAmB,SAAS;AAC9B,iBAAO,QAAQ;QACjB;AAEA,cAAM,EAAE,QAAO,IAAK,MAAM,OAAO,qBAA4B;AAC7D,eAAO,QACL,QAAQ,UACR,MAAM,SAAS,EAAE,UAAU,QAAQ,SAAQ,CAAE,CAAC;MAElD,GAAE;AAEF,aAAO,eAAe;QACpB,MAAM;QACN,UAAU,QAAQ;QAClB,IAAI,QAAQ;QACZ;QACA,MAAM,QAAQ;QACd,eAAe,MAAM,SAAS,EAAE,UAAU,QAAQ,SAAQ,CAAE;OAC7D;IACH;GACD;AACH;",
  "names": []
}
