{
  "version": 3,
  "sources": ["../../thirdweb/src/extensions/erc20/__generated__/IERC20/read/allowance.ts"],
  "sourcesContent": ["import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"allowance\" function.\n */\nexport type AllowanceParams = {\n  owner: AbiParameterToPrimitiveType<{ type: \"address\"; name: \"owner\" }>;\n  spender: AbiParameterToPrimitiveType<{ type: \"address\"; name: \"spender\" }>;\n};\n\nexport const FN_SELECTOR = \"0xdd62ed3e\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"address\",\n    name: \"owner\",\n  },\n  {\n    type: \"address\",\n    name: \"spender\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"uint256\",\n  },\n] as const;\n\n/**\n * Checks if the `allowance` method is supported by the given contract.\n * @param contract The ThirdwebContract.\n * @returns A promise that resolves to a boolean indicating if the `allowance` method is supported.\n * @extension ERC20\n * @example\n * ```ts\n * import { isAllowanceSupported } from \"thirdweb/extensions/erc20\";\n *\n * const supported = await isAllowanceSupported(contract);\n * ```\n */\nexport async function isAllowanceSupported(contract: ThirdwebContract<any>) {\n  return detectMethod({\n    contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"allowance\" function.\n * @param options - The options for the allowance function.\n * @returns The encoded ABI parameters.\n * @extension ERC20\n * @example\n * ```ts\n * import { encodeAllowanceParams } \"thirdweb/extensions/erc20\";\n * const result = encodeAllowanceParams({\n *  owner: ...,\n *  spender: ...,\n * });\n * ```\n */\nexport function encodeAllowanceParams(options: AllowanceParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.owner, options.spender]);\n}\n\n/**\n * Encodes the \"allowance\" function into a Hex string with its parameters.\n * @param options - The options for the allowance function.\n * @returns The encoded hexadecimal string.\n * @extension ERC20\n * @example\n * ```ts\n * import { encodeAllowance } \"thirdweb/extensions/erc20\";\n * const result = encodeAllowance({\n *  owner: ...,\n *  spender: ...,\n * });\n * ```\n */\nexport function encodeAllowance(options: AllowanceParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeAllowanceParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the allowance function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC20\n * @example\n * ```ts\n * import { decodeAllowanceResult } from \"thirdweb/extensions/erc20\";\n * const result = decodeAllowanceResult(\"...\");\n * ```\n */\nexport function decodeAllowanceResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"allowance\" function on the contract.\n * @param options - The options for the allowance function.\n * @returns The parsed result of the function call.\n * @extension ERC20\n * @example\n * ```ts\n * import { allowance } from \"thirdweb/extensions/erc20\";\n *\n * const result = await allowance({\n *  contract,\n *  owner: ...,\n *  spender: ...,\n * });\n *\n * ```\n */\nexport async function allowance(\n  options: BaseTransactionOptions<AllowanceParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.owner, options.spender],\n  });\n}\n"],
  "mappings": ";;;;;AAiBO,IAAM,cAAc;AAC3B,IAAM,YAAY;EAChB;IACE,MAAM;IACN,MAAM;;EAER;IACE,MAAM;IACN,MAAM;;;AAGV,IAAM,aAAa;EACjB;IACE,MAAM;;;AAgGV,eAAsB,UACpB,SAAgD;AAEhD,SAAO,aAAa;IAClB,UAAU,QAAQ;IAClB,QAAQ,CAAC,aAAa,WAAW,UAAU;IAC3C,QAAQ,CAAC,QAAQ,OAAO,QAAQ,OAAO;GACxC;AACH;",
  "names": []
}
