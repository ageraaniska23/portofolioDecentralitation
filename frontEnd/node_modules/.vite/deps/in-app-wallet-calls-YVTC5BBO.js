import {
  sendBatchTransaction
} from "./chunk-ONHLR6UH.js";
import {
  sendAndConfirmTransaction
} from "./chunk-25UT6ZS2.js";
import {
  eth_getTransactionReceipt
} from "./chunk-OTOBMETN.js";
import "./chunk-5CJUBOTY.js";
import "./chunk-DVPCWDY6.js";
import "./chunk-OSZAYZBM.js";
import "./chunk-S2KMC4ZU.js";
import "./chunk-RQ5H3BEW.js";
import "./chunk-2FH4XCFL.js";
import "./chunk-VYA3UASK.js";
import "./chunk-PZWOPBWI.js";
import "./chunk-HAADYJEF.js";
import "./chunk-SY6M73X4.js";
import "./chunk-GEF6DW5R.js";
import "./chunk-FPO5TL63.js";
import "./chunk-BF6IWIHR.js";
import "./chunk-4OMQ45VH.js";
import {
  getRpcClient
} from "./chunk-KFTJWVLQ.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-3UYCMIWJ.js";
import "./chunk-UV67MG5D.js";
import "./chunk-JMJMW6FX.js";
import "./chunk-CY3CMUVN.js";
import {
  uint8ArrayToHex
} from "./chunk-BNK74YTA.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-IAQW7B5J.js";
import "./chunk-Z2F5LG57.js";
import "./chunk-L46BJXKD.js";
import "./chunk-EWAXOTDC.js";
import "./chunk-TEQAYQEZ.js";
import "./chunk-SYYDPSNZ.js";
import "./chunk-MHFR2GDE.js";
import "./chunk-SUMWJFR6.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-SHWHM7JY.js";
import "./chunk-256EKJAK.js";

// node_modules/thirdweb/dist/esm/utils/random.js
function randomBytesHex(length = 32) {
  return uint8ArrayToHex(randomBytesBuffer(length));
}
function randomBytesBuffer(length = 32) {
  return globalThis.crypto.getRandomValues(new Uint8Array(length));
}

// node_modules/thirdweb/dist/esm/wallets/in-app/core/eip5972/in-app-wallet-calls.js
var bundlesToTransactions = /* @__PURE__ */ new Map();
var MAX_BUNDLE_ENTRIES = 1e3;
function setBundleId(bundleId, hashes) {
  if (bundlesToTransactions.size >= MAX_BUNDLE_ENTRIES) {
    const lru = bundlesToTransactions.keys().next().value;
    bundlesToTransactions.delete(lru);
  }
  bundlesToTransactions.set(bundleId, hashes);
}
async function inAppWalletSendCalls(args) {
  const { account, calls } = args;
  const hashes = [];
  const bundleId = randomBytesHex(65);
  bundlesToTransactions.set(bundleId, hashes);
  if (account.sendBatchTransaction) {
    const receipt = await sendBatchTransaction({
      account,
      transactions: calls
    });
    hashes.push(receipt.transactionHash);
    setBundleId(bundleId, hashes);
  } else {
    for (const tx of calls) {
      const receipt = await sendAndConfirmTransaction({
        account,
        transaction: tx
      });
      hashes.push(receipt.transactionHash);
      bundlesToTransactions.set(bundleId, hashes);
    }
  }
  return bundleId;
}
async function inAppWalletGetCallsStatus(args) {
  const { wallet, client, bundleId } = args;
  const chain = wallet.getChain();
  if (!chain) {
    throw new Error("Failed to get calls status, no active chain found");
  }
  const bundle = bundlesToTransactions.get(bundleId);
  if (!bundle) {
    throw new Error("Failed to get calls status, unknown bundle id");
  }
  const request = getRpcClient({ client, chain });
  let status = "CONFIRMED";
  const receipts = await Promise.all(bundle.map((hash) => eth_getTransactionReceipt(request, { hash }).then((receipt) => ({
    logs: receipt.logs.map((l) => ({
      address: l.address,
      data: l.data,
      topics: l.topics
    })),
    status: receipt.status,
    blockHash: receipt.blockHash,
    blockNumber: receipt.blockNumber,
    gasUsed: receipt.gasUsed,
    transactionHash: receipt.transactionHash
  })).catch(() => {
    status = "PENDING";
    return null;
  })));
  return {
    status,
    receipts: receipts.filter((r) => r !== null)
    // ts 5.5 please come we need you
  };
}
export {
  inAppWalletGetCallsStatus,
  inAppWalletSendCalls
};
//# sourceMappingURL=in-app-wallet-calls-YVTC5BBO.js.map
