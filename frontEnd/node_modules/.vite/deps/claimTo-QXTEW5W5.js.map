{
  "version": 3,
  "sources": ["../../thirdweb/src/extensions/erc721/drops/write/claimTo.ts"],
  "sourcesContent": ["import type { Address } from \"abitype\";\nimport type { BaseTransactionOptions } from \"../../../../transaction/types.js\";\nimport { getClaimParams } from \"../../../../utils/extensions/drops/get-claim-params.js\";\nimport { claim } from \"../../__generated__/IDrop/write/claim.js\";\n\n/**\n * Represents the parameters for claiming an ERC721 token.\n * @extension ERC721\n */\nexport type ClaimToParams = {\n  to: Address;\n  quantity: bigint;\n  from?: Address;\n};\n\n/**\n * Claim ERC721 NFTs to a specified address\n * @param options - The options for the transaction\n * @extension ERC721\n * @example\n * ```ts\n * import { claimTo } from \"thirdweb/extensions/erc721\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const transaction = claimTo({\n *   contract,\n *   to: \"0x...\",\n *   quantity: 1n,\n * });\n *\n * await sendTransaction({ transaction, account });\n * ```\n * @throws If no claim condition is set\n * @returns A promise that resolves with the submitted transaction hash.\n */\nexport function claimTo(options: BaseTransactionOptions<ClaimToParams>) {\n  return claim({\n    contract: options.contract,\n    asyncParams: () =>\n      getClaimParams({\n        type: \"erc721\",\n        contract: options.contract,\n        to: options.to,\n        quantity: options.quantity,\n        from: options.from,\n      }),\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCM,SAAU,QAAQ,SAA8C;AACpE,SAAO,MAAM;IACX,UAAU,QAAQ;IAClB,aAAa,MACX,eAAe;MACb,MAAM;MACN,UAAU,QAAQ;MAClB,IAAI,QAAQ;MACZ,UAAU,QAAQ;MAClB,MAAM,QAAQ;KACf;GACJ;AACH;",
  "names": []
}
