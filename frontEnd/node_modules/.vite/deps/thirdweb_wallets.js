import {
  hashMessage
} from "./chunk-3ZDLQNVW.js";
import {
  createWallet,
  ecosystemWallet,
  inAppWallet,
  walletConnect
} from "./chunk-PKPPFIQW.js";
import {
  getWalletBalance
} from "./chunk-E2DOQKS2.js";
import "./chunk-57DFWRZ3.js";
import {
  DefaultWalletConnectRequestHandlers,
  createWalletConnectClient,
  createWalletConnectSession,
  disconnectWalletConnectSession,
  getActiveWalletConnectSessions
} from "./chunk-VWNB63MK.js";
import "./chunk-7ZEMYE2R.js";
import "./chunk-BQBBWD34.js";
import {
  getWalletInfo
} from "./chunk-3MCYWU5O.js";
import "./chunk-5R32MHFT.js";
import "./chunk-67YIWUOQ.js";
import "./chunk-ARW6RUHX.js";
import "./chunk-2VXHZA4N.js";
import "./chunk-GUT7DEOA.js";
import "./chunk-G4K3WLFH.js";
import "./chunk-OB3T522R.js";
import "./chunk-IZQD6UD7.js";
import {
  injectedProvider
} from "./chunk-X54FPRZI.js";
import {
  smartWallet
} from "./chunk-7XC4GPHZ.js";
import "./chunk-5E5FQUOC.js";
import "./chunk-M7XADWCR.js";
import {
  createWalletEmitter
} from "./chunk-UX72VVBB.js";
import "./chunk-M7UJHDZW.js";
import "./chunk-GJBZJ4UL.js";
import "./chunk-YHAJC2I7.js";
import "./chunk-P4YNF73V.js";
import "./chunk-KE6XTC6J.js";
import "./chunk-LZH3KM55.js";
import "./chunk-ID6VDAA3.js";
import {
  parseTypedData
} from "./chunk-RIKVLZUS.js";
import "./chunk-SYURM43K.js";
import "./chunk-ZB7K7FRF.js";
import {
  sign,
  signTransaction
} from "./chunk-Z3BOV34S.js";
import "./chunk-OULA2JUL.js";
import "./chunk-5CJUBOTY.js";
import "./chunk-DVPCWDY6.js";
import "./chunk-OSZAYZBM.js";
import "./chunk-S2KMC4ZU.js";
import "./chunk-RQ5H3BEW.js";
import "./chunk-2FH4XCFL.js";
import {
  eth_sendRawTransaction
} from "./chunk-CMXLKATA.js";
import "./chunk-VYA3UASK.js";
import "./chunk-PZWOPBWI.js";
import "./chunk-HAADYJEF.js";
import "./chunk-WAYCTEWF.js";
import "./chunk-SY6M73X4.js";
import "./chunk-GEF6DW5R.js";
import "./chunk-V4R6W4TB.js";
import "./chunk-FPO5TL63.js";
import "./chunk-BF6IWIHR.js";
import "./chunk-4OMQ45VH.js";
import {
  getRpcClient
} from "./chunk-KFTJWVLQ.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-3UYCMIWJ.js";
import "./chunk-UV67MG5D.js";
import {
  hashTypedData,
  publicKeyToAddress
} from "./chunk-JMJMW6FX.js";
import "./chunk-CY3CMUVN.js";
import {
  hexToBigInt,
  toHex
} from "./chunk-BNK74YTA.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-IAQW7B5J.js";
import "./chunk-Z2F5LG57.js";
import {
  secp256k1
} from "./chunk-L46BJXKD.js";
import "./chunk-EWAXOTDC.js";
import "./chunk-TEQAYQEZ.js";
import {
  getCachedChain
} from "./chunk-SYYDPSNZ.js";
import "./chunk-MHFR2GDE.js";
import "./chunk-SUMWJFR6.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-SHWHM7JY.js";
import "./chunk-256EKJAK.js";

// node_modules/thirdweb/dist/esm/utils/signatures/signature-to-hex.js
function signatureToHex(signature) {
  const { r, s, v, yParity } = signature;
  const yParity_ = (() => {
    if (yParity === 0 || yParity === 1)
      return yParity;
    if (v && (v === 27n || v === 28n || v >= 35n))
      return v % 2n === 0n ? 1 : 0;
    throw new Error("Invalid `v` or `yParity` value");
  })();
  return `0x${new secp256k1.Signature(hexToBigInt(r), hexToBigInt(s)).toCompactHex()}${yParity_ === 0 ? "1b" : "1c"}`;
}

// node_modules/thirdweb/dist/esm/utils/signatures/sign-message.js
function signMessage({ message, privateKey }) {
  const signature = sign({ hash: hashMessage(message), privateKey });
  return signatureToHex(signature);
}

// node_modules/thirdweb/dist/esm/utils/signatures/sign-typed-data.js
function signTypedData(options) {
  const { privateKey, ...typedData } = options;
  const parsedTypeData = parseTypedData(typedData);
  const signature = sign({
    hash: hashTypedData(parsedTypeData),
    // TODO: Implement native hashTypedData
    privateKey
  });
  return signatureToHex(signature);
}

// node_modules/thirdweb/dist/esm/wallets/private-key.js
function privateKeyToAccount(options) {
  const { client } = options;
  const privateKey = `0x${options.privateKey.replace(/^0x/, "")}`;
  const publicKey = toHex(secp256k1.getPublicKey(privateKey.slice(2), false));
  const address = publicKeyToAddress(publicKey);
  const account = {
    address,
    sendTransaction: async (tx) => {
      const rpcRequest = getRpcClient({
        client,
        chain: getCachedChain(tx.chainId)
      });
      const signedTx = signTransaction({
        transaction: tx,
        privateKey
      });
      const transactionHash = await eth_sendRawTransaction(rpcRequest, signedTx);
      return {
        transactionHash
      };
    },
    signMessage: async ({ message }) => {
      return signMessage({
        message,
        privateKey
      });
    },
    signTypedData: async (_typedData) => {
      return signTypedData({
        ..._typedData,
        privateKey
      });
    },
    signTransaction: async (tx) => {
      return signTransaction({
        transaction: tx,
        privateKey
      });
    }
  };
  return account;
}

// node_modules/thirdweb/dist/esm/wallets/utils/generateAccount.js
async function generateAccount(options) {
  const privateKey = toHex(secp256k1.utils.randomPrivateKey());
  return privateKeyToAccount({ privateKey, client: options.client });
}

// node_modules/thirdweb/dist/esm/wallets/getAllWalletsList.js
async function getAllWalletsList() {
  return (await import("./wallet-infos-QC5TP4TJ.js")).default;
}

// node_modules/thirdweb/dist/esm/adapters/wallet-adapter.js
function createWalletAdapter(options) {
  const emitter = createWalletEmitter();
  let _chain = options.chain;
  return {
    id: "adapter",
    subscribe: emitter.subscribe,
    connect: async () => {
      emitter.emit("onConnect", options);
      return options.adaptedAccount;
    },
    autoConnect: async () => {
      emitter.emit("onConnect", options);
      return options.adaptedAccount;
    },
    disconnect: async () => {
      await options.onDisconnect();
      emitter.emit("disconnect", void 0);
    },
    getAccount() {
      return options.adaptedAccount;
    },
    getChain() {
      return _chain;
    },
    getConfig() {
      return options;
    },
    switchChain: async (chain) => {
      await options.switchChain(chain);
      _chain = chain;
      emitter.emit("chainChanged", chain);
    }
  };
}
export {
  DefaultWalletConnectRequestHandlers,
  createWallet,
  createWalletAdapter,
  createWalletConnectClient,
  createWalletConnectSession,
  disconnectWalletConnectSession,
  ecosystemWallet,
  inAppWallet as embeddedWallet,
  generateAccount,
  getActiveWalletConnectSessions,
  getAllWalletsList,
  getWalletBalance,
  getWalletInfo,
  inAppWallet,
  injectedProvider,
  privateKeyToAccount as privateKeyAccount,
  privateKeyToAccount,
  smartWallet,
  walletConnect
};
//# sourceMappingURL=thirdweb_wallets.js.map
