{
  "version": 3,
  "sources": ["../../thirdweb/src/extensions/erc165/__generated__/IERC165/read/supportsInterface.ts"],
  "sourcesContent": ["import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"supportsInterface\" function.\n */\nexport type SupportsInterfaceParams = {\n  interfaceId: AbiParameterToPrimitiveType<{\n    type: \"bytes4\";\n    name: \"interfaceId\";\n  }>;\n};\n\nexport const FN_SELECTOR = \"0x01ffc9a7\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"bytes4\",\n    name: \"interfaceId\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"bool\",\n  },\n] as const;\n\n/**\n * Checks if the `supportsInterface` method is supported by the given contract.\n * @param contract The ThirdwebContract.\n * @returns A promise that resolves to a boolean indicating if the `supportsInterface` method is supported.\n * @extension ERC165\n * @example\n * ```ts\n * import { isSupportsInterfaceSupported } from \"thirdweb/extensions/erc165\";\n *\n * const supported = await isSupportsInterfaceSupported(contract);\n * ```\n */\nexport async function isSupportsInterfaceSupported(\n  contract: ThirdwebContract<any>,\n) {\n  return detectMethod({\n    contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"supportsInterface\" function.\n * @param options - The options for the supportsInterface function.\n * @returns The encoded ABI parameters.\n * @extension ERC165\n * @example\n * ```ts\n * import { encodeSupportsInterfaceParams } \"thirdweb/extensions/erc165\";\n * const result = encodeSupportsInterfaceParams({\n *  interfaceId: ...,\n * });\n * ```\n */\nexport function encodeSupportsInterfaceParams(\n  options: SupportsInterfaceParams,\n) {\n  return encodeAbiParameters(FN_INPUTS, [options.interfaceId]);\n}\n\n/**\n * Encodes the \"supportsInterface\" function into a Hex string with its parameters.\n * @param options - The options for the supportsInterface function.\n * @returns The encoded hexadecimal string.\n * @extension ERC165\n * @example\n * ```ts\n * import { encodeSupportsInterface } \"thirdweb/extensions/erc165\";\n * const result = encodeSupportsInterface({\n *  interfaceId: ...,\n * });\n * ```\n */\nexport function encodeSupportsInterface(options: SupportsInterfaceParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeSupportsInterfaceParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the supportsInterface function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC165\n * @example\n * ```ts\n * import { decodeSupportsInterfaceResult } from \"thirdweb/extensions/erc165\";\n * const result = decodeSupportsInterfaceResult(\"...\");\n * ```\n */\nexport function decodeSupportsInterfaceResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"supportsInterface\" function on the contract.\n * @param options - The options for the supportsInterface function.\n * @returns The parsed result of the function call.\n * @extension ERC165\n * @example\n * ```ts\n * import { supportsInterface } from \"thirdweb/extensions/erc165\";\n *\n * const result = await supportsInterface({\n *  contract,\n *  interfaceId: ...,\n * });\n *\n * ```\n */\nexport async function supportsInterface(\n  options: BaseTransactionOptions<SupportsInterfaceParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.interfaceId],\n  });\n}\n"],
  "mappings": ";;;;;AAmBO,IAAM,cAAc;AAC3B,IAAM,YAAY;EAChB;IACE,MAAM;IACN,MAAM;;;AAGV,IAAM,aAAa;EACjB;IACE,MAAM;;;AAiGV,eAAsB,kBACpB,SAAwD;AAExD,SAAO,aAAa;IAClB,UAAU,QAAQ;IAClB,QAAQ,CAAC,aAAa,WAAW,UAAU;IAC3C,QAAQ,CAAC,QAAQ,WAAW;GAC7B;AACH;",
  "names": []
}
