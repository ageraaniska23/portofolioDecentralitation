"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FN_SELECTOR = void 0;
exports.isEncodeBytesBeforeMintERC1155Supported = isEncodeBytesBeforeMintERC1155Supported;
exports.encodeEncodeBytesBeforeMintERC1155Params = encodeEncodeBytesBeforeMintERC1155Params;
exports.encodeEncodeBytesBeforeMintERC1155 = encodeEncodeBytesBeforeMintERC1155;
exports.decodeEncodeBytesBeforeMintERC1155Result = decodeEncodeBytesBeforeMintERC1155Result;
exports.encodeBytesBeforeMintERC1155 = encodeBytesBeforeMintERC1155;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xa4c6930f";
const FN_INPUTS = [
    {
        name: "params",
        type: "tuple",
        internalType: "struct MintableERC1155.MintParamsERC1155",
        components: [
            {
                name: "request",
                type: "tuple",
                internalType: "struct MintableERC1155.MintRequestERC1155",
                components: [
                    {
                        name: "tokenId",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "startTimestamp",
                        type: "uint48",
                        internalType: "uint48",
                    },
                    {
                        name: "endTimestamp",
                        type: "uint48",
                        internalType: "uint48",
                    },
                    {
                        name: "recipient",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "quantity",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "currency",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "pricePerUnit",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "metadataURI",
                        type: "string",
                        internalType: "string",
                    },
                    {
                        name: "uid",
                        type: "bytes32",
                        internalType: "bytes32",
                    },
                ],
            },
            {
                name: "signature",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "metadataURI",
                type: "string",
                internalType: "string",
            },
        ],
    },
];
const FN_OUTPUTS = [
    {
        name: "",
        type: "bytes",
        internalType: "bytes",
    },
];
/**
 * Checks if the `encodeBytesBeforeMintERC1155` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `encodeBytesBeforeMintERC1155` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isEncodeBytesBeforeMintERC1155Supported } from "thirdweb/extensions/modular";
 *
 * const supported = await isEncodeBytesBeforeMintERC1155Supported(contract);
 * ```
 */
async function isEncodeBytesBeforeMintERC1155Supported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
/**
 * Encodes the parameters for the "encodeBytesBeforeMintERC1155" function.
 * @param options - The options for the encodeBytesBeforeMintERC1155 function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesBeforeMintERC1155Params } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesBeforeMintERC1155Params({
 *  params: ...,
 * });
 * ```
 */
function encodeEncodeBytesBeforeMintERC1155Params(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.params]);
}
/**
 * Encodes the "encodeBytesBeforeMintERC1155" function into a Hex string with its parameters.
 * @param options - The options for the encodeBytesBeforeMintERC1155 function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesBeforeMintERC1155 } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesBeforeMintERC1155({
 *  params: ...,
 * });
 * ```
 */
function encodeEncodeBytesBeforeMintERC1155(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeEncodeBytesBeforeMintERC1155Params(options).slice(2));
}
/**
 * Decodes the result of the encodeBytesBeforeMintERC1155 function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeEncodeBytesBeforeMintERC1155Result } from "thirdweb/extensions/modular";
 * const result = decodeEncodeBytesBeforeMintERC1155Result("...");
 * ```
 */
function decodeEncodeBytesBeforeMintERC1155Result(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "encodeBytesBeforeMintERC1155" function on the contract.
 * @param options - The options for the encodeBytesBeforeMintERC1155 function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeBytesBeforeMintERC1155 } from "thirdweb/extensions/modular";
 *
 * const result = await encodeBytesBeforeMintERC1155({
 *  contract,
 *  params: ...,
 * });
 *
 * ```
 */
async function encodeBytesBeforeMintERC1155(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.params],
    });
}
//# sourceMappingURL=encodeBytesBeforeMintERC1155.js.map