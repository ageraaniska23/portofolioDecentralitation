"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FN_SELECTOR = void 0;
exports.isEncodeBytesOnInstallSupported = isEncodeBytesOnInstallSupported;
exports.encodeEncodeBytesOnInstallParams = encodeEncodeBytesOnInstallParams;
exports.encodeEncodeBytesOnInstall = encodeEncodeBytesOnInstall;
exports.decodeEncodeBytesOnInstallResult = decodeEncodeBytesOnInstallResult;
exports.encodeBytesOnInstall = encodeBytesOnInstall;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x9adb1e41";
const FN_INPUTS = [
    {
        name: "royaltyRecipient",
        type: "address",
        internalType: "address",
    },
    {
        name: "royaltyBps",
        type: "uint256",
        internalType: "uint256",
    },
];
const FN_OUTPUTS = [
    {
        name: "",
        type: "bytes",
        internalType: "bytes",
    },
];
/**
 * Checks if the `encodeBytesOnInstall` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `encodeBytesOnInstall` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isEncodeBytesOnInstallSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isEncodeBytesOnInstallSupported(contract);
 * ```
 */
async function isEncodeBytesOnInstallSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
/**
 * Encodes the parameters for the "encodeBytesOnInstall" function.
 * @param options - The options for the encodeBytesOnInstall function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesOnInstallParams } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesOnInstallParams({
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 * });
 * ```
 */
function encodeEncodeBytesOnInstallParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.royaltyRecipient,
        options.royaltyBps,
    ]);
}
/**
 * Encodes the "encodeBytesOnInstall" function into a Hex string with its parameters.
 * @param options - The options for the encodeBytesOnInstall function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesOnInstall } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesOnInstall({
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 * });
 * ```
 */
function encodeEncodeBytesOnInstall(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeEncodeBytesOnInstallParams(options).slice(2));
}
/**
 * Decodes the result of the encodeBytesOnInstall function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeEncodeBytesOnInstallResult } from "thirdweb/extensions/modular";
 * const result = decodeEncodeBytesOnInstallResult("...");
 * ```
 */
function decodeEncodeBytesOnInstallResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "encodeBytesOnInstall" function on the contract.
 * @param options - The options for the encodeBytesOnInstall function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeBytesOnInstall } from "thirdweb/extensions/modular";
 *
 * const result = await encodeBytesOnInstall({
 *  contract,
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 * });
 *
 * ```
 */
async function encodeBytesOnInstall(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.royaltyRecipient, options.royaltyBps],
    });
}
//# sourceMappingURL=encodeBytesOnInstall.js.map