"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FN_SELECTOR = void 0;
exports.isTokenDataOfSupported = isTokenDataOfSupported;
exports.encodeTokenDataOfParams = encodeTokenDataOfParams;
exports.encodeTokenDataOf = encodeTokenDataOf;
exports.decodeTokenDataOfResult = decodeTokenDataOfResult;
exports.tokenDataOf = tokenDataOf;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xc0da9bcd";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "tokenId",
    },
];
const FN_OUTPUTS = [
    {
        type: "tuple",
        components: [
            {
                type: "address",
                name: "owner",
            },
            {
                type: "uint96",
                name: "mintTimestamp",
            },
        ],
    },
];
/**
 * Checks if the `tokenDataOf` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `tokenDataOf` method is supported.
 * @extension LENS
 * @example
 * ```ts
 * import { isTokenDataOfSupported } from "thirdweb/extensions/lens";
 *
 * const supported = await isTokenDataOfSupported(contract);
 * ```
 */
async function isTokenDataOfSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
/**
 * Encodes the parameters for the "tokenDataOf" function.
 * @param options - The options for the tokenDataOf function.
 * @returns The encoded ABI parameters.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeTokenDataOfParams } "thirdweb/extensions/lens";
 * const result = encodeTokenDataOfParams({
 *  tokenId: ...,
 * });
 * ```
 */
function encodeTokenDataOfParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.tokenId]);
}
/**
 * Encodes the "tokenDataOf" function into a Hex string with its parameters.
 * @param options - The options for the tokenDataOf function.
 * @returns The encoded hexadecimal string.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeTokenDataOf } "thirdweb/extensions/lens";
 * const result = encodeTokenDataOf({
 *  tokenId: ...,
 * });
 * ```
 */
function encodeTokenDataOf(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeTokenDataOfParams(options).slice(2));
}
/**
 * Decodes the result of the tokenDataOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension LENS
 * @example
 * ```ts
 * import { decodeTokenDataOfResult } from "thirdweb/extensions/lens";
 * const result = decodeTokenDataOfResult("...");
 * ```
 */
function decodeTokenDataOfResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "tokenDataOf" function on the contract.
 * @param options - The options for the tokenDataOf function.
 * @returns The parsed result of the function call.
 * @extension LENS
 * @example
 * ```ts
 * import { tokenDataOf } from "thirdweb/extensions/lens";
 *
 * const result = await tokenDataOf({
 *  contract,
 *  tokenId: ...,
 * });
 *
 * ```
 */
async function tokenDataOf(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.tokenId],
    });
}
//# sourceMappingURL=tokenDataOf.js.map