"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FN_SELECTOR = void 0;
exports.isIsModuleRegisteredSupported = isIsModuleRegisteredSupported;
exports.encodeIsModuleRegisteredParams = encodeIsModuleRegisteredParams;
exports.encodeIsModuleRegistered = encodeIsModuleRegistered;
exports.decodeIsModuleRegisteredResult = decodeIsModuleRegisteredResult;
exports.isModuleRegistered = isModuleRegistered;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x1c5ebe2f";
const FN_INPUTS = [
    {
        type: "address",
        name: "moduleAddress",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
    },
];
/**
 * Checks if the `isModuleRegistered` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `isModuleRegistered` method is supported.
 * @extension LENS
 * @example
 * ```ts
 * import { isIsModuleRegisteredSupported } from "thirdweb/extensions/lens";
 *
 * const supported = await isIsModuleRegisteredSupported(contract);
 * ```
 */
async function isIsModuleRegisteredSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
/**
 * Encodes the parameters for the "isModuleRegistered" function.
 * @param options - The options for the isModuleRegistered function.
 * @returns The encoded ABI parameters.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeIsModuleRegisteredParams } "thirdweb/extensions/lens";
 * const result = encodeIsModuleRegisteredParams({
 *  moduleAddress: ...,
 * });
 * ```
 */
function encodeIsModuleRegisteredParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.moduleAddress]);
}
/**
 * Encodes the "isModuleRegistered" function into a Hex string with its parameters.
 * @param options - The options for the isModuleRegistered function.
 * @returns The encoded hexadecimal string.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeIsModuleRegistered } "thirdweb/extensions/lens";
 * const result = encodeIsModuleRegistered({
 *  moduleAddress: ...,
 * });
 * ```
 */
function encodeIsModuleRegistered(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeIsModuleRegisteredParams(options).slice(2));
}
/**
 * Decodes the result of the isModuleRegistered function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension LENS
 * @example
 * ```ts
 * import { decodeIsModuleRegisteredResult } from "thirdweb/extensions/lens";
 * const result = decodeIsModuleRegisteredResult("...");
 * ```
 */
function decodeIsModuleRegisteredResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "isModuleRegistered" function on the contract.
 * @param options - The options for the isModuleRegistered function.
 * @returns The parsed result of the function call.
 * @extension LENS
 * @example
 * ```ts
 * import { isModuleRegistered } from "thirdweb/extensions/lens";
 *
 * const result = await isModuleRegistered({
 *  contract,
 *  moduleAddress: ...,
 * });
 *
 * ```
 */
async function isModuleRegistered(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.moduleAddress],
    });
}
//# sourceMappingURL=isModuleRegistered.js.map