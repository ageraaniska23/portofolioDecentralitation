"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateDirectListingButton = CreateDirectListingButton;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const contract_js_1 = require("../../../../../../contract/contract.js");
const getApprovalForTransaction_js_1 = require("../../../../../../extensions/erc20/write/getApprovalForTransaction.js");
const createListing_js_1 = require("../../../../../../extensions/marketplace/direct-listings/write/createListing.js");
const useReadContract_js_1 = require("../../../../../core/hooks/contract/useReadContract.js");
const useSendAndConfirmTransaction_js_1 = require("../../../../../core/hooks/transaction/useSendAndConfirmTransaction.js");
const useActiveAccount_js_1 = require("../../../../../core/hooks/wallets/useActiveAccount.js");
const index_js_1 = require("../../../TransactionButton/index.js");
/**
 * This button is used to create Direct listings for the thirdweb Marketplace v3 contract
 *
 * It uses the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)
 * and the [`createListing` extension](https://portal.thirdweb.com/references/typescript/v5/marketplace/createListing) under the hood
 * which means it inherits all the props of those 2 components.
 *
 * @example
 * ```tsx
 * import { CreateDirectListingButton } from "thirdweb/react";
 *
 * <CreateDirectListingButton
 *   contractAddress="0x..." // contract address for the marketplace-v3
 *   chain={...} // the chain which the marketplace contract is deployed on
 *
 *   // These props below are the same props for `createListing`
 *   // to get the full list, check the docs link above
 *   tokenId={0n}
 *   assetContractAddress="0x..." // The NFT contract address whose NFT(s) you want to sell
 *   pricePerToken={"0.1"} // sell for 0.1 <native token>
 * >
 *   Sell NFT
 * </CreateDirectListingButton>
 * ```
 *
 * For error handling & callbacks on transaction-sent and transaction-confirmed,
 * please refer to the TransactionButton docs.
 * @component
 */
function CreateDirectListingButton(props) {
    const { contractAddress, chain, client, children, payModal, assetContractAddress, tokenId, } = props;
    const marketplaceContract = (0, contract_js_1.getContract)({
        address: contractAddress,
        chain,
        client,
    });
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const defaultPayModalMetadata = payModal ? payModal.metadata : undefined;
    const { data: payMetadata } = (0, useReadContract_js_1.useReadContract)(getPayMetadata, {
        contract: (0, contract_js_1.getContract)({
            address: assetContractAddress,
            chain,
            client,
        }),
        tokenId,
        queryOptions: {
            enabled: !defaultPayModalMetadata,
        },
    });
    const { mutateAsync } = (0, useSendAndConfirmTransaction_js_1.useSendAndConfirmTransaction)();
    const prepareTransaction = (0, react_1.useCallback)(async () => {
        if (!account) {
            throw new Error("No account detected");
        }
        const listingTx = (0, createListing_js_1.createListing)({
            contract: marketplaceContract,
            ...props,
        });
        const approveTx = await (0, getApprovalForTransaction_js_1.getApprovalForTransaction)({
            transaction: listingTx,
            account,
        });
        if (approveTx) {
            await mutateAsync(approveTx);
        }
        return listingTx;
    }, [marketplaceContract, props, account, mutateAsync]);
    return ((0, jsx_runtime_1.jsx)(index_js_1.TransactionButton, { transaction: () => prepareTransaction(), payModal: {
            metadata: defaultPayModalMetadata || payMetadata,
            ...payModal,
        }, ...props, children: children }));
}
/**
 * @internal
 */
async function getPayMetadata(options) {
    const [{ isERC721 }, { isERC1155 }, { getContractMetadata }, { getNFT: getERC721 }, { getNFT: getERC1155 },] = await Promise.all([
        Promise.resolve().then(() => require("../../../../../../extensions/erc721/read/isERC721.js")),
        Promise.resolve().then(() => require("../../../../../../extensions/erc1155/read/isERC1155.js")),
        Promise.resolve().then(() => require("../../../../../../extensions/common/read/getContractMetadata.js")),
        Promise.resolve().then(() => require("../../../../../../extensions/erc721/read/getNFT.js")),
        Promise.resolve().then(() => require("../../../../../../extensions/erc1155/read/getNFT.js")),
    ]);
    const [is721, is1155, contractMetadata] = await Promise.all([
        isERC721(options),
        isERC1155(options),
        getContractMetadata(options),
    ]);
    if (is721) {
        const nft = await getERC721(options);
        return {
            image: nft?.metadata?.image,
            name: nft?.metadata?.name,
        };
    }
    if (is1155) {
        const nft = await getERC1155(options);
        return {
            image: nft?.metadata?.image,
            name: nft?.metadata?.name,
        };
    }
    return {
        image: contractMetadata?.image,
        name: contractMetadata?.name,
    };
}
//# sourceMappingURL=index.js.map