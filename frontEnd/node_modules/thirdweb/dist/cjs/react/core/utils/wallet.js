"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useEnsName = useEnsName;
exports.useEnsAvatar = useEnsAvatar;
exports.useConnectedWalletDetails = useConnectedWalletDetails;
exports.useWalletInfo = useWalletInfo;
exports.useWalletImage = useWalletImage;
exports.hasSponsoredTransactionsEnabled = hasSponsoredTransactionsEnabled;
const react_query_1 = require("@tanstack/react-query");
const ethereum_js_1 = require("../../../chains/chain-definitions/ethereum.js");
const resolve_avatar_js_1 = require("../../../extensions/ens/resolve-avatar.js");
const resolve_name_js_1 = require("../../../extensions/ens/resolve-name.js");
const getWalletInfo_js_1 = require("../../../wallets/__generated__/getWalletInfo.js");
const useWalletBalance_js_1 = require("../hooks/others/useWalletBalance.js");
const addresses_js_1 = require("./addresses.js");
/**
 * Get the ENS name and avatar for an address
 * @param options - the client and address to get the ENS name and avatar for
 * @returns - a query object that resolves to the ENS name
 * @example
 * ```tsx
 * import { useEnsName } from "thirdweb/react";
 *
 * const { data: ensName } = useEnsName({
 *  client,
 *  address: "0x1234...",
 * });
 * ```
 * @extension ENS
 */
function useEnsName(options) {
    const { client, address } = options;
    return (0, react_query_1.useQuery)({
        queryKey: ["ens-name", address],
        enabled: !!address,
        queryFn: () => (0, resolve_name_js_1.resolveName)({
            client,
            address: address || "",
            resolverChain: ethereum_js_1.ethereum,
        }),
    });
}
/**
 * Get the ENS avatar for an ENS name
 * @param options - the client and ENS name to get the avatar for
 * @returns - a query object that resolves to the avatar
 * @example
 * ```tsx
 * import { useEnsAvatar } from "thirdweb/react";
 *
 * const { data: ensAvatar } = useEnsAvatar({
 *  client,
 *  ensName: "my-ens-name.eth",
 * });
 * ```
 * @extension ENS
 */
function useEnsAvatar(options) {
    const { client, ensName } = options;
    return (0, react_query_1.useQuery)({
        queryKey: ["ens-avatar", ensName],
        enabled: !!ensName,
        queryFn: async () => (0, resolve_avatar_js_1.resolveAvatar)({
            client,
            name: ensName || "",
        }),
    });
}
/**
 * @internal
 */
function useConnectedWalletDetails(client, walletChain, activeAccount, displayBalanceToken) {
    const tokenAddress = walletChain && displayBalanceToken
        ? displayBalanceToken[Number(walletChain.id)]
        : undefined;
    const ensNameQuery = useEnsName({
        client,
        address: activeAccount?.address,
    });
    const ensAvatarQuery = useEnsAvatar({
        client,
        ensName: ensNameQuery.data,
    });
    const shortAddress = activeAccount?.address
        ? (0, addresses_js_1.shortenString)(activeAccount.address, false)
        : "";
    const balanceQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        chain: walletChain ? walletChain : undefined,
        tokenAddress,
        address: activeAccount?.address,
        client,
    });
    const addressOrENS = ensNameQuery.data || shortAddress;
    return {
        ensNameQuery,
        ensAvatarQuery,
        addressOrENS,
        shortAddress,
        balanceQuery,
    };
}
/**
 * Returns the wallet info for the provided wallet id.
 *
 * @example
 * ```tsx
 * import { useWalletInfo } from "thirdweb/react";
 *
 * const { data: walletInfo } = useWalletInfo("io.metamask");
 * console.log("Walelt name", walletInfo?.name);
 * ```
 * @wallet
 */
function useWalletInfo(id) {
    return (0, react_query_1.useQuery)({
        queryKey: ["wallet-info", id],
        queryFn: () => {
            if (!id) {
                throw new Error("Wallet id is required");
            }
            return (0, getWalletInfo_js_1.getWalletInfo)(id, false);
        },
        retry: false,
        refetchOnWindowFocus: false,
        refetchOnMount: false,
        enabled: !!id,
    });
}
/**
 * Returns the wallet icon for the provided wallet id.
 *
 * @example
 * ```tsx
 * import { useWalletImage } from "thirdweb/react";
 *
 * const { data: walletImage } = useWalletImage("io.metamask");
 *
 * return <img src={walletImage} alt="MetaMask logo" />;
 * ```
 *
 * @wallet
 */
function useWalletImage(id) {
    return (0, react_query_1.useQuery)({
        queryKey: ["wallet-image", id],
        queryFn: () => {
            if (!id) {
                throw new Error("Wallet id is required");
            }
            return (0, getWalletInfo_js_1.getWalletInfo)(id, true);
        },
        retry: false,
        refetchOnWindowFocus: false,
        refetchOnMount: false,
        enabled: !!id,
    });
}
/**
 * @internal
 */
function hasSponsoredTransactionsEnabled(wallet) {
    if (!wallet) {
        return false;
    }
    let sponsoredTransactionsEnabled = false;
    if (wallet && wallet.id === "smart") {
        const options = wallet.getConfig();
        if ("sponsorGas" in options) {
            sponsoredTransactionsEnabled = options.sponsorGas;
        }
        if ("gasless" in options) {
            sponsoredTransactionsEnabled = options.gasless;
        }
    }
    if (wallet && wallet.id === "inApp") {
        const options = wallet.getConfig();
        if (options && "smartAccount" in options && options.smartAccount) {
            const smartOptions = options.smartAccount;
            if ("sponsorGas" in smartOptions) {
                sponsoredTransactionsEnabled = smartOptions.sponsorGas;
            }
            if ("gasless" in smartOptions) {
                sponsoredTransactionsEnabled = smartOptions.gasless;
            }
        }
    }
    return sponsoredTransactionsEnabled;
}
//# sourceMappingURL=wallet.js.map