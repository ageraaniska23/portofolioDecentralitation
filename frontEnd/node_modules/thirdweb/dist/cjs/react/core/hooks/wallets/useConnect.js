"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConnect = useConnect;
const react_1 = require("react");
const connection_manager_js_1 = require("../../providers/connection-manager.js");
/**
 * A hook to set a wallet as active wallet
 * @returns A function that lets you connect a wallet.
 * @example
 * ```jsx
 * import { useConnect } from "thirdweb/react";
 * import { createWallet } from "thirdweb/wallets";
 *
 * function Example() {
 *   const { connect, isConnecting, error } = useConnect();
 *   return (
 *     <button
 *       onClick={() =>
 *         connect(async () => {
 *           // instantiate wallet
 *           const wallet = createWallet("io.metamask");
 *           // connect wallet
 *           await wallet.connect();
 *           // return the wallet
 *           return wallet;
 *         })
 *       }
 *     >
 *       Connect
 *     </button>
 *   );
 * }
 * ```
 * @walletConnection
 */
function useConnect(options) {
    const manager = (0, connection_manager_js_1.useConnectionManagerCtx)("useConnect");
    const { connect } = manager;
    const [isConnecting, setIsConnecting] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    const handleConnection = (0, react_1.useCallback)(async (walletOrFn) => {
        // reset error state
        setError(null);
        if (typeof walletOrFn !== "function") {
            return await connect(walletOrFn, options);
        }
        setIsConnecting(true);
        try {
            const w = await walletOrFn();
            return await connect(w, options);
        }
        catch (e) {
            console.error(e);
            setError(e);
        }
        finally {
            setIsConnecting(false);
        }
        return null;
    }, [connect, options]);
    return { connect: handleConnection, isConnecting, error };
}
//# sourceMappingURL=useConnect.js.map