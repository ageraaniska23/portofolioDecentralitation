import { readContract } from "../../../../../transaction/read-contract.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
import { decodeAbiParameters } from "viem";
import { detectMethod } from "../../../../../utils/bytecode/detectExtension.js";
export const FN_SELECTOR = "0x29a20bf4";
const FN_INPUTS = [
    {
        name: "_id",
        type: "uint256",
        internalType: "uint256",
    },
];
const FN_OUTPUTS = [
    {
        name: "claimCondition",
        type: "tuple",
        internalType: "struct ClaimableERC1155.ClaimCondition",
        components: [
            {
                name: "availableSupply",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "allowlistMerkleRoot",
                type: "bytes32",
                internalType: "bytes32",
            },
            {
                name: "pricePerUnit",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "currency",
                type: "address",
                internalType: "address",
            },
            {
                name: "startTimestamp",
                type: "uint48",
                internalType: "uint48",
            },
            {
                name: "endTimestamp",
                type: "uint48",
                internalType: "uint48",
            },
            {
                name: "auxData",
                type: "string",
                internalType: "string",
            },
        ],
    },
];
/**
 * Checks if the `getClaimConditionByTokenId` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getClaimConditionByTokenId` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isGetClaimConditionByTokenIdSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isGetClaimConditionByTokenIdSupported(contract);
 * ```
 */
export async function isGetClaimConditionByTokenIdSupported(contract) {
    return detectMethod({
        contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
/**
 * Encodes the parameters for the "getClaimConditionByTokenId" function.
 * @param options - The options for the getClaimConditionByTokenId function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeGetClaimConditionByTokenIdParams } "thirdweb/extensions/modular";
 * const result = encodeGetClaimConditionByTokenIdParams({
 *  id: ...,
 * });
 * ```
 */
export function encodeGetClaimConditionByTokenIdParams(options) {
    return encodeAbiParameters(FN_INPUTS, [options.id]);
}
/**
 * Encodes the "getClaimConditionByTokenId" function into a Hex string with its parameters.
 * @param options - The options for the getClaimConditionByTokenId function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeGetClaimConditionByTokenId } "thirdweb/extensions/modular";
 * const result = encodeGetClaimConditionByTokenId({
 *  id: ...,
 * });
 * ```
 */
export function encodeGetClaimConditionByTokenId(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (FN_SELECTOR +
        encodeGetClaimConditionByTokenIdParams(options).slice(2));
}
/**
 * Decodes the result of the getClaimConditionByTokenId function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeGetClaimConditionByTokenIdResult } from "thirdweb/extensions/modular";
 * const result = decodeGetClaimConditionByTokenIdResult("...");
 * ```
 */
export function decodeGetClaimConditionByTokenIdResult(result) {
    return decodeAbiParameters(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "getClaimConditionByTokenId" function on the contract.
 * @param options - The options for the getClaimConditionByTokenId function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { getClaimConditionByTokenId } from "thirdweb/extensions/modular";
 *
 * const result = await getClaimConditionByTokenId({
 *  contract,
 *  id: ...,
 * });
 *
 * ```
 */
export async function getClaimConditionByTokenId(options) {
    return readContract({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.id],
    });
}
//# sourceMappingURL=getClaimConditionByTokenId.js.map