import { readContract } from "../../../../../transaction/read-contract.js";
import { encodeAbiParameters } from "../../../../../utils/abi/encodeAbiParameters.js";
import { decodeAbiParameters } from "viem";
import { detectMethod } from "../../../../../utils/bytecode/detectExtension.js";
export const FN_SELECTOR = "0x47404aa5";
const FN_INPUTS = [
    {
        name: "params",
        type: "tuple",
        internalType: "struct MintableERC721.MintParamsERC721",
        components: [
            {
                name: "request",
                type: "tuple",
                internalType: "struct MintableERC721.MintRequestERC721",
                components: [
                    {
                        name: "startTimestamp",
                        type: "uint48",
                        internalType: "uint48",
                    },
                    {
                        name: "endTimestamp",
                        type: "uint48",
                        internalType: "uint48",
                    },
                    {
                        name: "recipient",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "quantity",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "currency",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "pricePerUnit",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "baseURI",
                        type: "string",
                        internalType: "string",
                    },
                    {
                        name: "uid",
                        type: "bytes32",
                        internalType: "bytes32",
                    },
                ],
            },
            {
                name: "signature",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "baseURI",
                type: "string",
                internalType: "string",
            },
        ],
    },
];
const FN_OUTPUTS = [
    {
        name: "",
        type: "bytes",
        internalType: "bytes",
    },
];
/**
 * Checks if the `encodeBytesBeforeMintERC721` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `encodeBytesBeforeMintERC721` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isEncodeBytesBeforeMintERC721Supported } from "thirdweb/extensions/modular";
 *
 * const supported = await isEncodeBytesBeforeMintERC721Supported(contract);
 * ```
 */
export async function isEncodeBytesBeforeMintERC721Supported(contract) {
    return detectMethod({
        contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
/**
 * Encodes the parameters for the "encodeBytesBeforeMintERC721" function.
 * @param options - The options for the encodeBytesBeforeMintERC721 function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesBeforeMintERC721Params } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesBeforeMintERC721Params({
 *  params: ...,
 * });
 * ```
 */
export function encodeEncodeBytesBeforeMintERC721Params(options) {
    return encodeAbiParameters(FN_INPUTS, [options.params]);
}
/**
 * Encodes the "encodeBytesBeforeMintERC721" function into a Hex string with its parameters.
 * @param options - The options for the encodeBytesBeforeMintERC721 function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesBeforeMintERC721 } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesBeforeMintERC721({
 *  params: ...,
 * });
 * ```
 */
export function encodeEncodeBytesBeforeMintERC721(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (FN_SELECTOR +
        encodeEncodeBytesBeforeMintERC721Params(options).slice(2));
}
/**
 * Decodes the result of the encodeBytesBeforeMintERC721 function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeEncodeBytesBeforeMintERC721Result } from "thirdweb/extensions/modular";
 * const result = decodeEncodeBytesBeforeMintERC721Result("...");
 * ```
 */
export function decodeEncodeBytesBeforeMintERC721Result(result) {
    return decodeAbiParameters(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "encodeBytesBeforeMintERC721" function on the contract.
 * @param options - The options for the encodeBytesBeforeMintERC721 function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeBytesBeforeMintERC721 } from "thirdweb/extensions/modular";
 *
 * const result = await encodeBytesBeforeMintERC721({
 *  contract,
 *  params: ...,
 * });
 *
 * ```
 */
export async function encodeBytesBeforeMintERC721(options) {
    return readContract({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.params],
    });
}
//# sourceMappingURL=encodeBytesBeforeMintERC721.js.map