import { readContract } from "../../../../../transaction/read-contract.js";
import { decodeAbiParameters } from "viem";
import { detectMethod } from "../../../../../utils/bytecode/detectExtension.js";
export const FN_SELECTOR = "0x30a63e11";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        name: "claimCondition",
        type: "tuple",
        internalType: "struct ClaimableERC721.ClaimCondition",
        components: [
            {
                name: "availableSupply",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "allowlistMerkleRoot",
                type: "bytes32",
                internalType: "bytes32",
            },
            {
                name: "pricePerUnit",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "currency",
                type: "address",
                internalType: "address",
            },
            {
                name: "startTimestamp",
                type: "uint48",
                internalType: "uint48",
            },
            {
                name: "endTimestamp",
                type: "uint48",
                internalType: "uint48",
            },
            {
                name: "auxData",
                type: "string",
                internalType: "string",
            },
        ],
    },
];
/**
 * Checks if the `getClaimCondition` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getClaimCondition` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isGetClaimConditionSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isGetClaimConditionSupported(contract);
 * ```
 */
export async function isGetClaimConditionSupported(contract) {
    return detectMethod({
        contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
/**
 * Decodes the result of the getClaimCondition function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeGetClaimConditionResult } from "thirdweb/extensions/modular";
 * const result = decodeGetClaimConditionResult("...");
 * ```
 */
export function decodeGetClaimConditionResult(result) {
    return decodeAbiParameters(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "getClaimCondition" function on the contract.
 * @param options - The options for the getClaimCondition function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { getClaimCondition } from "thirdweb/extensions/modular";
 *
 * const result = await getClaimCondition({
 *  contract,
 * });
 *
 * ```
 */
export async function getClaimCondition(options) {
    return readContract({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
//# sourceMappingURL=getClaimCondition.js.map