import { useMutation } from "@tanstack/react-query";
import { sendTransaction } from "../../../../transaction/actions/send-transaction.js";
import { resolvePromisedValue } from "../../../../utils/promise/resolve-promised-value.js";
/**
 * A hook to send a transaction.
 * @returns A mutation object to send a transaction.
 * @example
 * ```jsx
 * import { useSendTransaction } from "thirdweb/react";
 * const { mutate: sendTx, data: transactionResult } = useSendTransaction();
 *
 * // later
 * sendTx(tx);
 * ```
 * @internal
 */
export function useSendTransactionCore(args) {
    const { showPayModal, gasless, wallet, switchChain } = args;
    let _account = wallet?.getAccount();
    return useMutation({
        mutationFn: async (tx) => {
            // switch chain if needed
            if (wallet && tx.chain.id !== wallet.getChain()?.id) {
                await switchChain(tx.chain);
                // in smart wallet case, account may change after chain switch
                _account = wallet.getAccount();
            }
            const account = _account;
            if (!account) {
                throw new Error("No active account");
            }
            if (!showPayModal) {
                return sendTransaction({
                    transaction: tx,
                    account,
                    gasless,
                });
            }
            return new Promise((resolve, reject) => {
                const sendTx = async () => {
                    try {
                        const res = await sendTransaction({
                            transaction: tx,
                            account,
                            gasless,
                        });
                        resolve(res);
                    }
                    catch (e) {
                        reject(e);
                    }
                };
                (async () => {
                    try {
                        const [_nativeValue, _erc20Value] = await Promise.all([
                            resolvePromisedValue(tx.value),
                            resolvePromisedValue(tx.erc20Value),
                        ]);
                        const nativeValue = _nativeValue || 0n;
                        const erc20Value = _erc20Value?.amountWei || 0n;
                        if (nativeValue > 0n || erc20Value > 0n) {
                            showPayModal({
                                tx,
                                sendTx,
                                rejectTx: reject,
                                resolveTx: resolve,
                            });
                        }
                        else {
                            sendTx();
                        }
                    }
                    catch (e) {
                        console.error("Failed to estimate cost", e);
                        // send it anyway?
                        sendTx();
                    }
                })();
            });
        },
    });
}
//# sourceMappingURL=useSendTransaction.js.map