"use client";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { cacheChains } from "../../../chains/utils.js";
import { CustomThemeProvider } from "../../core/design-system/CustomThemeProvider.js";
import { EmbedContainer } from "./ConnectWallet/Modal/ConnectEmbed.js";
import { useConnectLocale } from "./ConnectWallet/locale/getConnectLocale.js";
import BuyScreen from "./ConnectWallet/screens/Buy/BuyScreen.js";
import { ExecutingTxScreen } from "./TransactionButton/ExecutingScreen.js";
import { DynamicHeight } from "./components/DynamicHeight.js";
import { Spinner } from "./components/Spinner.js";
/**
 * Embed thirdweb Pay UI for Buy tokens using Crypto or Credit Card.
 *
 * PayEmbed also renders a "Connect" button if the user is not connected to a wallet. You can customize the options for "Connect" button using the `connectOptions` prop.
 *
 * @param props - Props of type [`PayEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedProps) to configure the PayEmbed component.
 *
 * @example
 * ```tsx
 * <PayEmbed
 *   client={client}
 *   connectOptions={{
 *     connectModal: {
 *       size: 'compact',
 *     }
 *   }}
 *   payOptions={{
 *     buyWithCrypto: false,
 *   }}
 *  />
 * ```
 */
export function PayEmbed(props) {
    const localeQuery = useConnectLocale(props.locale || "en_US");
    const [screen, setScreen] = useState("buy");
    const theme = props.theme || "dark";
    // to update cached chains ASAP, we skip using useEffect - this does not trigger a re-render so it's fine
    if (props.connectOptions?.chains) {
        cacheChains(props.connectOptions?.chains);
    }
    if (props.connectOptions?.chain) {
        cacheChains([props.connectOptions?.chain]);
    }
    let content = null;
    const metadata = props.payOptions && "metadata" in props.payOptions
        ? props.payOptions.metadata
        : null;
    if (!localeQuery.data) {
        content = (_jsx("div", { style: {
                minHeight: "350px",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
            }, children: _jsx(Spinner, { size: "xl", color: "secondaryText" }) }));
    }
    else {
        content = (_jsxs(_Fragment, { children: [screen === "buy" && (_jsx(BuyScreen, { title: metadata?.name || "Buy", isEmbed: true, supportedTokens: props.supportedTokens, theme: theme, client: props.client, connectLocale: localeQuery.data, payOptions: props.payOptions || {
                        mode: "fund_wallet",
                    }, onDone: () => {
                        if (props.payOptions?.mode === "transaction") {
                            setScreen("execute-tx");
                        }
                    }, connectOptions: props.connectOptions, onBack: undefined })), screen === "execute-tx" &&
                    props.payOptions?.mode === "transaction" &&
                    props.payOptions.transaction && (_jsx(ExecutingTxScreen, { tx: props.payOptions.transaction, closeModal: () => {
                        setScreen("buy");
                    }, onBack: () => {
                        setScreen("buy");
                    }, onTxSent: () => { } }))] }));
    }
    return (_jsx(CustomThemeProvider, { theme: theme, children: _jsx(EmbedContainer, { modalSize: "compact", style: props.style, className: props.className, children: _jsx(DynamicHeight, { children: content }) }) }));
}
//# sourceMappingURL=PayEmbed.js.map