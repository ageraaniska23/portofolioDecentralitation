import type { PayUIOptions } from "../../../../../../core/hooks/connection/ConnectButtonProps.js";
import { type ERC20OrNativeToken } from "../../nativeToken.js";
import type { SupportedChainAndTokens } from "../swap/useSwapSupportedChains.js";
export declare function useUISelectionStates(options: {
    payOptions: PayUIOptions;
    supportedDestinations: SupportedChainAndTokens;
}): {
    tokenAmount: string;
    setTokenAmount: import("react").Dispatch<import("react").SetStateAction<string>>;
    toChain: Readonly<import("../../../../../../../chains/types.js").ChainOptions & {
        rpc: string;
    }>;
    setToChain: import("react").Dispatch<import("react").SetStateAction<Readonly<import("../../../../../../../chains/types.js").ChainOptions & {
        rpc: string;
    }>>>;
    deferredTokenAmount: string;
    fromChain: Readonly<import("../../../../../../../chains/types.js").ChainOptions & {
        rpc: string;
    }>;
    setFromChain: import("react").Dispatch<import("react").SetStateAction<Readonly<import("../../../../../../../chains/types.js").ChainOptions & {
        rpc: string;
    }>>>;
    toToken: ERC20OrNativeToken;
    setToToken: import("react").Dispatch<import("react").SetStateAction<ERC20OrNativeToken>>;
    fromToken: ERC20OrNativeToken;
    setFromToken: import("react").Dispatch<import("react").SetStateAction<ERC20OrNativeToken>>;
    selectedCurrency: import("../fiat/currencies.js").CurrencyMeta;
    setSelectedCurrency: import("react").Dispatch<import("react").SetStateAction<import("../fiat/currencies.js").CurrencyMeta>>;
};
//# sourceMappingURL=useUISelectionStates.d.ts.map