import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getClaimConditionByTokenId" function.
 */
export type GetClaimConditionByTokenIdParams = {
    id: AbiParameterToPrimitiveType<{
        name: "_id";
        type: "uint256";
        internalType: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0x29a20bf4";
/**
 * Checks if the `getClaimConditionByTokenId` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getClaimConditionByTokenId` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isGetClaimConditionByTokenIdSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isGetClaimConditionByTokenIdSupported(contract);
 * ```
 */
export declare function isGetClaimConditionByTokenIdSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getClaimConditionByTokenId" function.
 * @param options - The options for the getClaimConditionByTokenId function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeGetClaimConditionByTokenIdParams } "thirdweb/extensions/modular";
 * const result = encodeGetClaimConditionByTokenIdParams({
 *  id: ...,
 * });
 * ```
 */
export declare function encodeGetClaimConditionByTokenIdParams(options: GetClaimConditionByTokenIdParams): `0x${string}`;
/**
 * Encodes the "getClaimConditionByTokenId" function into a Hex string with its parameters.
 * @param options - The options for the getClaimConditionByTokenId function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeGetClaimConditionByTokenId } "thirdweb/extensions/modular";
 * const result = encodeGetClaimConditionByTokenId({
 *  id: ...,
 * });
 * ```
 */
export declare function encodeGetClaimConditionByTokenId(options: GetClaimConditionByTokenIdParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the getClaimConditionByTokenId function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeGetClaimConditionByTokenIdResult } from "thirdweb/extensions/modular";
 * const result = decodeGetClaimConditionByTokenIdResult("...");
 * ```
 */
export declare function decodeGetClaimConditionByTokenIdResult(result: Hex): {
    availableSupply: bigint;
    allowlistMerkleRoot: `0x${string}`;
    pricePerUnit: bigint;
    currency: string;
    startTimestamp: number;
    endTimestamp: number;
    auxData: string;
};
/**
 * Calls the "getClaimConditionByTokenId" function on the contract.
 * @param options - The options for the getClaimConditionByTokenId function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { getClaimConditionByTokenId } from "thirdweb/extensions/modular";
 *
 * const result = await getClaimConditionByTokenId({
 *  contract,
 *  id: ...,
 * });
 *
 * ```
 */
export declare function getClaimConditionByTokenId(options: BaseTransactionOptions<GetClaimConditionByTokenIdParams>): Promise<{
    availableSupply: bigint;
    allowlistMerkleRoot: `0x${string}`;
    pricePerUnit: bigint;
    currency: string;
    startTimestamp: number;
    endTimestamp: number;
    auxData: string;
}>;
//# sourceMappingURL=getClaimConditionByTokenId.d.ts.map