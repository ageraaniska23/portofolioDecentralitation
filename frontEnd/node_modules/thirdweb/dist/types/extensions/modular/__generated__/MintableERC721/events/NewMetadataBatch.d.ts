import type { AbiParameterToPrimitiveType } from "abitype";
/**
 * Represents the filters for the "NewMetadataBatch" event.
 */
export type NewMetadataBatchEventFilters = Partial<{
    startTokenIdInclusive: AbiParameterToPrimitiveType<{
        name: "startTokenIdInclusive";
        type: "uint256";
        indexed: true;
        internalType: "uint256";
    }>;
    endTokenIdNonInclusive: AbiParameterToPrimitiveType<{
        name: "endTokenIdNonInclusive";
        type: "uint256";
        indexed: true;
        internalType: "uint256";
    }>;
}>;
/**
 * Creates an event object for the NewMetadataBatch event.
 * @param filters - Optional filters to apply to the event.
 * @returns The prepared event object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { getContractEvents } from "thirdweb";
 * import { newMetadataBatchEvent } from "thirdweb/extensions/modular";
 *
 * const events = await getContractEvents({
 * contract,
 * events: [
 *  newMetadataBatchEvent({
 *  startTokenIdInclusive: ...,
 *  endTokenIdNonInclusive: ...,
 * })
 * ],
 * });
 * ```
 */
export declare function newMetadataBatchEvent(filters?: NewMetadataBatchEventFilters): import("../../../../../event/prepare-event.js").PreparedEvent<{
    readonly name: "NewMetadataBatch";
    readonly type: "event";
    readonly inputs: readonly [{
        readonly type: "uint256";
        readonly name: "startTokenIdInclusive";
        readonly indexed: true;
    }, {
        readonly type: "uint256";
        readonly name: "endTokenIdNonInclusive";
        readonly indexed: true;
    }, {
        readonly type: "string";
        readonly name: "baseURI";
    }];
}>;
//# sourceMappingURL=NewMetadataBatch.d.ts.map