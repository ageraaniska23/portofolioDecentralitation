import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0xe6c23512";
/**
 * Checks if the `getAllMetadataBatches` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAllMetadataBatches` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isGetAllMetadataBatchesSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isGetAllMetadataBatchesSupported(contract);
 * ```
 */
export declare function isGetAllMetadataBatchesSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the getAllMetadataBatches function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeGetAllMetadataBatchesResult } from "thirdweb/extensions/modular";
 * const result = decodeGetAllMetadataBatchesResult("...");
 * ```
 */
export declare function decodeGetAllMetadataBatchesResult(result: Hex): readonly {
    startTokenIdInclusive: bigint;
    endTokenIdInclusive: bigint;
    baseURI: string;
}[];
/**
 * Calls the "getAllMetadataBatches" function on the contract.
 * @param options - The options for the getAllMetadataBatches function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { getAllMetadataBatches } from "thirdweb/extensions/modular";
 *
 * const result = await getAllMetadataBatches({
 *  contract,
 * });
 *
 * ```
 */
export declare function getAllMetadataBatches(options: BaseTransactionOptions): Promise<readonly {
    startTokenIdInclusive: bigint;
    endTokenIdInclusive: bigint;
    baseURI: string;
}[]>;
//# sourceMappingURL=getAllMetadataBatches.d.ts.map