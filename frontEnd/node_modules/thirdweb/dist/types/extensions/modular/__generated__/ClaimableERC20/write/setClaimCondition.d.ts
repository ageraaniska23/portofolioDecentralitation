import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "setClaimCondition" function.
 */
export type SetClaimConditionParams = WithOverrides<{
    claimCondition: AbiParameterToPrimitiveType<{
        name: "_claimCondition";
        type: "tuple";
        internalType: "struct ClaimableERC20.ClaimCondition";
        components: [
            {
                name: "availableSupply";
                type: "uint256";
                internalType: "uint256";
            },
            {
                name: "allowlistMerkleRoot";
                type: "bytes32";
                internalType: "bytes32";
            },
            {
                name: "pricePerUnit";
                type: "uint256";
                internalType: "uint256";
            },
            {
                name: "currency";
                type: "address";
                internalType: "address";
            },
            {
                name: "startTimestamp";
                type: "uint48";
                internalType: "uint48";
            },
            {
                name: "endTimestamp";
                type: "uint48";
                internalType: "uint48";
            },
            {
                name: "auxData";
                type: "string";
                internalType: "string";
            }
        ];
    }>;
}>;
export declare const FN_SELECTOR: "0x3564659c";
/**
 * Checks if the `setClaimCondition` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `setClaimCondition` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isSetClaimConditionSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isSetClaimConditionSupported(contract);
 * ```
 */
export declare function isSetClaimConditionSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "setClaimCondition" function.
 * @param options - The options for the setClaimCondition function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeSetClaimConditionParams } "thirdweb/extensions/modular";
 * const result = encodeSetClaimConditionParams({
 *  claimCondition: ...,
 * });
 * ```
 */
export declare function encodeSetClaimConditionParams(options: SetClaimConditionParams): `0x${string}`;
/**
 * Encodes the "setClaimCondition" function into a Hex string with its parameters.
 * @param options - The options for the setClaimCondition function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeSetClaimCondition } "thirdweb/extensions/modular";
 * const result = encodeSetClaimCondition({
 *  claimCondition: ...,
 * });
 * ```
 */
export declare function encodeSetClaimCondition(options: SetClaimConditionParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Prepares a transaction to call the "setClaimCondition" function on the contract.
 * @param options - The options for the "setClaimCondition" function.
 * @returns A prepared transaction object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { setClaimCondition } from "thirdweb/extensions/modular";
 *
 * const transaction = setClaimCondition({
 *  contract,
 *  claimCondition: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setClaimCondition(options: BaseTransactionOptions<SetClaimConditionParams | {
    asyncParams: () => Promise<SetClaimConditionParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=setClaimCondition.d.ts.map