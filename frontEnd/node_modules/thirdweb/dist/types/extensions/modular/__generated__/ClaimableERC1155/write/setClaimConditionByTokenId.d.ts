import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "setClaimConditionByTokenId" function.
 */
export type SetClaimConditionByTokenIdParams = WithOverrides<{
    id: AbiParameterToPrimitiveType<{
        name: "_id";
        type: "uint256";
        internalType: "uint256";
    }>;
    claimCondition: AbiParameterToPrimitiveType<{
        name: "_claimCondition";
        type: "tuple";
        internalType: "struct ClaimableERC1155.ClaimCondition";
        components: [
            {
                name: "availableSupply";
                type: "uint256";
                internalType: "uint256";
            },
            {
                name: "allowlistMerkleRoot";
                type: "bytes32";
                internalType: "bytes32";
            },
            {
                name: "pricePerUnit";
                type: "uint256";
                internalType: "uint256";
            },
            {
                name: "currency";
                type: "address";
                internalType: "address";
            },
            {
                name: "startTimestamp";
                type: "uint48";
                internalType: "uint48";
            },
            {
                name: "endTimestamp";
                type: "uint48";
                internalType: "uint48";
            },
            {
                name: "auxData";
                type: "string";
                internalType: "string";
            }
        ];
    }>;
}>;
export declare const FN_SELECTOR: "0xb7720475";
/**
 * Checks if the `setClaimConditionByTokenId` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `setClaimConditionByTokenId` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isSetClaimConditionByTokenIdSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isSetClaimConditionByTokenIdSupported(contract);
 * ```
 */
export declare function isSetClaimConditionByTokenIdSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "setClaimConditionByTokenId" function.
 * @param options - The options for the setClaimConditionByTokenId function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeSetClaimConditionByTokenIdParams } "thirdweb/extensions/modular";
 * const result = encodeSetClaimConditionByTokenIdParams({
 *  id: ...,
 *  claimCondition: ...,
 * });
 * ```
 */
export declare function encodeSetClaimConditionByTokenIdParams(options: SetClaimConditionByTokenIdParams): `0x${string}`;
/**
 * Encodes the "setClaimConditionByTokenId" function into a Hex string with its parameters.
 * @param options - The options for the setClaimConditionByTokenId function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeSetClaimConditionByTokenId } "thirdweb/extensions/modular";
 * const result = encodeSetClaimConditionByTokenId({
 *  id: ...,
 *  claimCondition: ...,
 * });
 * ```
 */
export declare function encodeSetClaimConditionByTokenId(options: SetClaimConditionByTokenIdParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Prepares a transaction to call the "setClaimConditionByTokenId" function on the contract.
 * @param options - The options for the "setClaimConditionByTokenId" function.
 * @returns A prepared transaction object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { setClaimConditionByTokenId } from "thirdweb/extensions/modular";
 *
 * const transaction = setClaimConditionByTokenId({
 *  contract,
 *  id: ...,
 *  claimCondition: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setClaimConditionByTokenId(options: BaseTransactionOptions<SetClaimConditionByTokenIdParams | {
    asyncParams: () => Promise<SetClaimConditionByTokenIdParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=setClaimConditionByTokenId.d.ts.map