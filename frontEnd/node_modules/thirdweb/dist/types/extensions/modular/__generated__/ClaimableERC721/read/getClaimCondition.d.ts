import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0x30a63e11";
/**
 * Checks if the `getClaimCondition` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getClaimCondition` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isGetClaimConditionSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isGetClaimConditionSupported(contract);
 * ```
 */
export declare function isGetClaimConditionSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the getClaimCondition function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeGetClaimConditionResult } from "thirdweb/extensions/modular";
 * const result = decodeGetClaimConditionResult("...");
 * ```
 */
export declare function decodeGetClaimConditionResult(result: Hex): {
    availableSupply: bigint;
    allowlistMerkleRoot: `0x${string}`;
    pricePerUnit: bigint;
    currency: string;
    startTimestamp: number;
    endTimestamp: number;
    auxData: string;
};
/**
 * Calls the "getClaimCondition" function on the contract.
 * @param options - The options for the getClaimCondition function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { getClaimCondition } from "thirdweb/extensions/modular";
 *
 * const result = await getClaimCondition({
 *  contract,
 * });
 *
 * ```
 */
export declare function getClaimCondition(options: BaseTransactionOptions): Promise<{
    availableSupply: bigint;
    allowlistMerkleRoot: `0x${string}`;
    pricePerUnit: bigint;
    currency: string;
    startTimestamp: number;
    endTimestamp: number;
    auxData: string;
}>;
//# sourceMappingURL=getClaimCondition.d.ts.map