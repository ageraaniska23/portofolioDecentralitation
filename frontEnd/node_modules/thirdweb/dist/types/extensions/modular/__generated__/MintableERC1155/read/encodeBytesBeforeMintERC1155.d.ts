import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "encodeBytesBeforeMintERC1155" function.
 */
export type EncodeBytesBeforeMintERC1155Params = {
    params: AbiParameterToPrimitiveType<{
        name: "params";
        type: "tuple";
        internalType: "struct MintableERC1155.MintParamsERC1155";
        components: [
            {
                name: "request";
                type: "tuple";
                internalType: "struct MintableERC1155.MintRequestERC1155";
                components: [
                    {
                        name: "tokenId";
                        type: "uint256";
                        internalType: "uint256";
                    },
                    {
                        name: "startTimestamp";
                        type: "uint48";
                        internalType: "uint48";
                    },
                    {
                        name: "endTimestamp";
                        type: "uint48";
                        internalType: "uint48";
                    },
                    {
                        name: "recipient";
                        type: "address";
                        internalType: "address";
                    },
                    {
                        name: "quantity";
                        type: "uint256";
                        internalType: "uint256";
                    },
                    {
                        name: "currency";
                        type: "address";
                        internalType: "address";
                    },
                    {
                        name: "pricePerUnit";
                        type: "uint256";
                        internalType: "uint256";
                    },
                    {
                        name: "metadataURI";
                        type: "string";
                        internalType: "string";
                    },
                    {
                        name: "uid";
                        type: "bytes32";
                        internalType: "bytes32";
                    }
                ];
            },
            {
                name: "signature";
                type: "bytes";
                internalType: "bytes";
            },
            {
                name: "metadataURI";
                type: "string";
                internalType: "string";
            }
        ];
    }>;
};
export declare const FN_SELECTOR: "0xa4c6930f";
/**
 * Checks if the `encodeBytesBeforeMintERC1155` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `encodeBytesBeforeMintERC1155` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isEncodeBytesBeforeMintERC1155Supported } from "thirdweb/extensions/modular";
 *
 * const supported = await isEncodeBytesBeforeMintERC1155Supported(contract);
 * ```
 */
export declare function isEncodeBytesBeforeMintERC1155Supported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "encodeBytesBeforeMintERC1155" function.
 * @param options - The options for the encodeBytesBeforeMintERC1155 function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesBeforeMintERC1155Params } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesBeforeMintERC1155Params({
 *  params: ...,
 * });
 * ```
 */
export declare function encodeEncodeBytesBeforeMintERC1155Params(options: EncodeBytesBeforeMintERC1155Params): `0x${string}`;
/**
 * Encodes the "encodeBytesBeforeMintERC1155" function into a Hex string with its parameters.
 * @param options - The options for the encodeBytesBeforeMintERC1155 function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesBeforeMintERC1155 } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesBeforeMintERC1155({
 *  params: ...,
 * });
 * ```
 */
export declare function encodeEncodeBytesBeforeMintERC1155(options: EncodeBytesBeforeMintERC1155Params): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the encodeBytesBeforeMintERC1155 function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeEncodeBytesBeforeMintERC1155Result } from "thirdweb/extensions/modular";
 * const result = decodeEncodeBytesBeforeMintERC1155Result("...");
 * ```
 */
export declare function decodeEncodeBytesBeforeMintERC1155Result(result: Hex): `0x${string}`;
/**
 * Calls the "encodeBytesBeforeMintERC1155" function on the contract.
 * @param options - The options for the encodeBytesBeforeMintERC1155 function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeBytesBeforeMintERC1155 } from "thirdweb/extensions/modular";
 *
 * const result = await encodeBytesBeforeMintERC1155({
 *  contract,
 *  params: ...,
 * });
 *
 * ```
 */
export declare function encodeBytesBeforeMintERC1155(options: BaseTransactionOptions<EncodeBytesBeforeMintERC1155Params>): Promise<`0x${string}`>;
//# sourceMappingURL=encodeBytesBeforeMintERC1155.d.ts.map