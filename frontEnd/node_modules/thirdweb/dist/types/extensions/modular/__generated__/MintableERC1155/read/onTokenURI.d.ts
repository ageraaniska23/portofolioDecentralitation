import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "onTokenURI" function.
 */
export type OnTokenURIParams = {
    tokenId: AbiParameterToPrimitiveType<{
        name: "_tokenId";
        type: "uint256";
        internalType: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0xcfc0cb96";
/**
 * Checks if the `onTokenURI` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `onTokenURI` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isOnTokenURISupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isOnTokenURISupported(contract);
 * ```
 */
export declare function isOnTokenURISupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "onTokenURI" function.
 * @param options - The options for the onTokenURI function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeOnTokenURIParams } "thirdweb/extensions/modular";
 * const result = encodeOnTokenURIParams({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeOnTokenURIParams(options: OnTokenURIParams): `0x${string}`;
/**
 * Encodes the "onTokenURI" function into a Hex string with its parameters.
 * @param options - The options for the onTokenURI function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeOnTokenURI } "thirdweb/extensions/modular";
 * const result = encodeOnTokenURI({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeOnTokenURI(options: OnTokenURIParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the onTokenURI function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeOnTokenURIResult } from "thirdweb/extensions/modular";
 * const result = decodeOnTokenURIResult("...");
 * ```
 */
export declare function decodeOnTokenURIResult(result: Hex): string;
/**
 * Calls the "onTokenURI" function on the contract.
 * @param options - The options for the onTokenURI function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { onTokenURI } from "thirdweb/extensions/modular";
 *
 * const result = await onTokenURI({
 *  contract,
 *  tokenId: ...,
 * });
 *
 * ```
 */
export declare function onTokenURI(options: BaseTransactionOptions<OnTokenURIParams>): Promise<string>;
//# sourceMappingURL=onTokenURI.d.ts.map