import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "encodeBytesOnInstall" function.
 */
export type EncodeBytesOnInstallParams = {
    royaltyRecipient: AbiParameterToPrimitiveType<{
        name: "royaltyRecipient";
        type: "address";
        internalType: "address";
    }>;
    royaltyBps: AbiParameterToPrimitiveType<{
        name: "royaltyBps";
        type: "uint256";
        internalType: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0x9adb1e41";
/**
 * Checks if the `encodeBytesOnInstall` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `encodeBytesOnInstall` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isEncodeBytesOnInstallSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isEncodeBytesOnInstallSupported(contract);
 * ```
 */
export declare function isEncodeBytesOnInstallSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "encodeBytesOnInstall" function.
 * @param options - The options for the encodeBytesOnInstall function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesOnInstallParams } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesOnInstallParams({
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 * });
 * ```
 */
export declare function encodeEncodeBytesOnInstallParams(options: EncodeBytesOnInstallParams): `0x${string}`;
/**
 * Encodes the "encodeBytesOnInstall" function into a Hex string with its parameters.
 * @param options - The options for the encodeBytesOnInstall function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesOnInstall } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesOnInstall({
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 * });
 * ```
 */
export declare function encodeEncodeBytesOnInstall(options: EncodeBytesOnInstallParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the encodeBytesOnInstall function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeEncodeBytesOnInstallResult } from "thirdweb/extensions/modular";
 * const result = decodeEncodeBytesOnInstallResult("...");
 * ```
 */
export declare function decodeEncodeBytesOnInstallResult(result: Hex): `0x${string}`;
/**
 * Calls the "encodeBytesOnInstall" function on the contract.
 * @param options - The options for the encodeBytesOnInstall function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeBytesOnInstall } from "thirdweb/extensions/modular";
 *
 * const result = await encodeBytesOnInstall({
 *  contract,
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 * });
 *
 * ```
 */
export declare function encodeBytesOnInstall(options: BaseTransactionOptions<EncodeBytesOnInstallParams>): Promise<`0x${string}`>;
//# sourceMappingURL=encodeBytesOnInstall.d.ts.map