import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "encodeBytesBeforeMintERC20" function.
 */
export type EncodeBytesBeforeMintERC20Params = {
    params: AbiParameterToPrimitiveType<{
        name: "params";
        type: "tuple";
        internalType: "struct MintableERC20.MintParamsERC20";
        components: [
            {
                name: "request";
                type: "tuple";
                internalType: "struct MintableERC20.MintRequestERC20";
                components: [
                    {
                        name: "startTimestamp";
                        type: "uint48";
                        internalType: "uint48";
                    },
                    {
                        name: "endTimestamp";
                        type: "uint48";
                        internalType: "uint48";
                    },
                    {
                        name: "recipient";
                        type: "address";
                        internalType: "address";
                    },
                    {
                        name: "quantity";
                        type: "uint256";
                        internalType: "uint256";
                    },
                    {
                        name: "currency";
                        type: "address";
                        internalType: "address";
                    },
                    {
                        name: "pricePerUnit";
                        type: "uint256";
                        internalType: "uint256";
                    },
                    {
                        name: "uid";
                        type: "bytes32";
                        internalType: "bytes32";
                    }
                ];
            },
            {
                name: "signature";
                type: "bytes";
                internalType: "bytes";
            }
        ];
    }>;
};
export declare const FN_SELECTOR: "0xc7a090f4";
/**
 * Checks if the `encodeBytesBeforeMintERC20` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `encodeBytesBeforeMintERC20` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isEncodeBytesBeforeMintERC20Supported } from "thirdweb/extensions/modular";
 *
 * const supported = await isEncodeBytesBeforeMintERC20Supported(contract);
 * ```
 */
export declare function isEncodeBytesBeforeMintERC20Supported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "encodeBytesBeforeMintERC20" function.
 * @param options - The options for the encodeBytesBeforeMintERC20 function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesBeforeMintERC20Params } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesBeforeMintERC20Params({
 *  params: ...,
 * });
 * ```
 */
export declare function encodeEncodeBytesBeforeMintERC20Params(options: EncodeBytesBeforeMintERC20Params): `0x${string}`;
/**
 * Encodes the "encodeBytesBeforeMintERC20" function into a Hex string with its parameters.
 * @param options - The options for the encodeBytesBeforeMintERC20 function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesBeforeMintERC20 } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesBeforeMintERC20({
 *  params: ...,
 * });
 * ```
 */
export declare function encodeEncodeBytesBeforeMintERC20(options: EncodeBytesBeforeMintERC20Params): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the encodeBytesBeforeMintERC20 function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeEncodeBytesBeforeMintERC20Result } from "thirdweb/extensions/modular";
 * const result = decodeEncodeBytesBeforeMintERC20Result("...");
 * ```
 */
export declare function decodeEncodeBytesBeforeMintERC20Result(result: Hex): `0x${string}`;
/**
 * Calls the "encodeBytesBeforeMintERC20" function on the contract.
 * @param options - The options for the encodeBytesBeforeMintERC20 function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeBytesBeforeMintERC20 } from "thirdweb/extensions/modular";
 *
 * const result = await encodeBytesBeforeMintERC20({
 *  contract,
 *  params: ...,
 * });
 *
 * ```
 */
export declare function encodeBytesBeforeMintERC20(options: BaseTransactionOptions<EncodeBytesBeforeMintERC20Params>): Promise<`0x${string}`>;
//# sourceMappingURL=encodeBytesBeforeMintERC20.d.ts.map