import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "setDefaultRoyaltyInfo" function.
 */
export type SetDefaultRoyaltyInfoParams = WithOverrides<{
    royaltyRecipient: AbiParameterToPrimitiveType<{
        name: "_royaltyRecipient";
        type: "address";
        internalType: "address";
    }>;
    royaltyBps: AbiParameterToPrimitiveType<{
        name: "_royaltyBps";
        type: "uint256";
        internalType: "uint256";
    }>;
}>;
export declare const FN_SELECTOR: "0x600dd5ea";
/**
 * Checks if the `setDefaultRoyaltyInfo` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `setDefaultRoyaltyInfo` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isSetDefaultRoyaltyInfoSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isSetDefaultRoyaltyInfoSupported(contract);
 * ```
 */
export declare function isSetDefaultRoyaltyInfoSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "setDefaultRoyaltyInfo" function.
 * @param options - The options for the setDefaultRoyaltyInfo function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeSetDefaultRoyaltyInfoParams } "thirdweb/extensions/modular";
 * const result = encodeSetDefaultRoyaltyInfoParams({
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 * });
 * ```
 */
export declare function encodeSetDefaultRoyaltyInfoParams(options: SetDefaultRoyaltyInfoParams): `0x${string}`;
/**
 * Encodes the "setDefaultRoyaltyInfo" function into a Hex string with its parameters.
 * @param options - The options for the setDefaultRoyaltyInfo function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeSetDefaultRoyaltyInfo } "thirdweb/extensions/modular";
 * const result = encodeSetDefaultRoyaltyInfo({
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 * });
 * ```
 */
export declare function encodeSetDefaultRoyaltyInfo(options: SetDefaultRoyaltyInfoParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Prepares a transaction to call the "setDefaultRoyaltyInfo" function on the contract.
 * @param options - The options for the "setDefaultRoyaltyInfo" function.
 * @returns A prepared transaction object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { setDefaultRoyaltyInfo } from "thirdweb/extensions/modular";
 *
 * const transaction = setDefaultRoyaltyInfo({
 *  contract,
 *  royaltyRecipient: ...,
 *  royaltyBps: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setDefaultRoyaltyInfo(options: BaseTransactionOptions<SetDefaultRoyaltyInfoParams | {
    asyncParams: () => Promise<SetDefaultRoyaltyInfoParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=setDefaultRoyaltyInfo.d.ts.map