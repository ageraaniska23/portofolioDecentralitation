import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "encodeBytesUploadMetadata" function.
 */
export type EncodeBytesUploadMetadataParams = {
    encryptedURI: AbiParameterToPrimitiveType<{
        name: "encryptedURI";
        type: "bytes";
        internalType: "bytes";
    }>;
    provenanceHash: AbiParameterToPrimitiveType<{
        name: "provenanceHash";
        type: "bytes32";
        internalType: "bytes32";
    }>;
};
export declare const FN_SELECTOR: "0x479eac8a";
/**
 * Checks if the `encodeBytesUploadMetadata` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `encodeBytesUploadMetadata` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isEncodeBytesUploadMetadataSupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isEncodeBytesUploadMetadataSupported(contract);
 * ```
 */
export declare function isEncodeBytesUploadMetadataSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "encodeBytesUploadMetadata" function.
 * @param options - The options for the encodeBytesUploadMetadata function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesUploadMetadataParams } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesUploadMetadataParams({
 *  encryptedURI: ...,
 *  provenanceHash: ...,
 * });
 * ```
 */
export declare function encodeEncodeBytesUploadMetadataParams(options: EncodeBytesUploadMetadataParams): `0x${string}`;
/**
 * Encodes the "encodeBytesUploadMetadata" function into a Hex string with its parameters.
 * @param options - The options for the encodeBytesUploadMetadata function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeEncodeBytesUploadMetadata } "thirdweb/extensions/modular";
 * const result = encodeEncodeBytesUploadMetadata({
 *  encryptedURI: ...,
 *  provenanceHash: ...,
 * });
 * ```
 */
export declare function encodeEncodeBytesUploadMetadata(options: EncodeBytesUploadMetadataParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the encodeBytesUploadMetadata function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MODULAR
 * @example
 * ```ts
 * import { decodeEncodeBytesUploadMetadataResult } from "thirdweb/extensions/modular";
 * const result = decodeEncodeBytesUploadMetadataResult("...");
 * ```
 */
export declare function decodeEncodeBytesUploadMetadataResult(result: Hex): `0x${string}`;
/**
 * Calls the "encodeBytesUploadMetadata" function on the contract.
 * @param options - The options for the encodeBytesUploadMetadata function.
 * @returns The parsed result of the function call.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeBytesUploadMetadata } from "thirdweb/extensions/modular";
 *
 * const result = await encodeBytesUploadMetadata({
 *  contract,
 *  encryptedURI: ...,
 *  provenanceHash: ...,
 * });
 *
 * ```
 */
export declare function encodeBytesUploadMetadata(options: BaseTransactionOptions<EncodeBytesUploadMetadataParams>): Promise<`0x${string}`>;
//# sourceMappingURL=encodeBytesUploadMetadata.d.ts.map