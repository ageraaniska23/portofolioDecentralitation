import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "beforeMintERC1155" function.
 */
export type BeforeMintERC1155Params = WithOverrides<{
    to: AbiParameterToPrimitiveType<{
        name: "_to";
        type: "address";
        internalType: "address";
    }>;
    id: AbiParameterToPrimitiveType<{
        name: "_id";
        type: "uint256";
        internalType: "uint256";
    }>;
    quantity: AbiParameterToPrimitiveType<{
        name: "_quantity";
        type: "uint256";
        internalType: "uint256";
    }>;
    data: AbiParameterToPrimitiveType<{
        name: "_data";
        type: "bytes";
        internalType: "bytes";
    }>;
}>;
export declare const FN_SELECTOR: "0x1e1dcb18";
/**
 * Checks if the `beforeMintERC1155` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `beforeMintERC1155` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isBeforeMintERC1155Supported } from "thirdweb/extensions/modular";
 *
 * const supported = await isBeforeMintERC1155Supported(contract);
 * ```
 */
export declare function isBeforeMintERC1155Supported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "beforeMintERC1155" function.
 * @param options - The options for the beforeMintERC1155 function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeBeforeMintERC1155Params } "thirdweb/extensions/modular";
 * const result = encodeBeforeMintERC1155Params({
 *  to: ...,
 *  id: ...,
 *  quantity: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeBeforeMintERC1155Params(options: BeforeMintERC1155Params): `0x${string}`;
/**
 * Encodes the "beforeMintERC1155" function into a Hex string with its parameters.
 * @param options - The options for the beforeMintERC1155 function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeBeforeMintERC1155 } "thirdweb/extensions/modular";
 * const result = encodeBeforeMintERC1155({
 *  to: ...,
 *  id: ...,
 *  quantity: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeBeforeMintERC1155(options: BeforeMintERC1155Params): `${typeof FN_SELECTOR}${string}`;
/**
 * Prepares a transaction to call the "beforeMintERC1155" function on the contract.
 * @param options - The options for the "beforeMintERC1155" function.
 * @returns A prepared transaction object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { beforeMintERC1155 } from "thirdweb/extensions/modular";
 *
 * const transaction = beforeMintERC1155({
 *  contract,
 *  to: ...,
 *  id: ...,
 *  quantity: ...,
 *  data: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function beforeMintERC1155(options: BaseTransactionOptions<BeforeMintERC1155Params | {
    asyncParams: () => Promise<BeforeMintERC1155Params>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=beforeMintERC1155.d.ts.map