import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "setTokenURI" function.
 */
export type SetTokenURIParams = WithOverrides<{
    id: AbiParameterToPrimitiveType<{
        name: "_id";
        type: "uint256";
        internalType: "uint256";
    }>;
    uri: AbiParameterToPrimitiveType<{
        name: "_uri";
        type: "string";
        internalType: "string";
    }>;
}>;
export declare const FN_SELECTOR: "0x162094c4";
/**
 * Checks if the `setTokenURI` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `setTokenURI` method is supported.
 * @extension MODULAR
 * @example
 * ```ts
 * import { isSetTokenURISupported } from "thirdweb/extensions/modular";
 *
 * const supported = await isSetTokenURISupported(contract);
 * ```
 */
export declare function isSetTokenURISupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "setTokenURI" function.
 * @param options - The options for the setTokenURI function.
 * @returns The encoded ABI parameters.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeSetTokenURIParams } "thirdweb/extensions/modular";
 * const result = encodeSetTokenURIParams({
 *  id: ...,
 *  uri: ...,
 * });
 * ```
 */
export declare function encodeSetTokenURIParams(options: SetTokenURIParams): `0x${string}`;
/**
 * Encodes the "setTokenURI" function into a Hex string with its parameters.
 * @param options - The options for the setTokenURI function.
 * @returns The encoded hexadecimal string.
 * @extension MODULAR
 * @example
 * ```ts
 * import { encodeSetTokenURI } "thirdweb/extensions/modular";
 * const result = encodeSetTokenURI({
 *  id: ...,
 *  uri: ...,
 * });
 * ```
 */
export declare function encodeSetTokenURI(options: SetTokenURIParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Prepares a transaction to call the "setTokenURI" function on the contract.
 * @param options - The options for the "setTokenURI" function.
 * @returns A prepared transaction object.
 * @extension MODULAR
 * @example
 * ```ts
 * import { setTokenURI } from "thirdweb/extensions/modular";
 *
 * const transaction = setTokenURI({
 *  contract,
 *  id: ...,
 *  uri: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setTokenURI(options: BaseTransactionOptions<SetTokenURIParams | {
    asyncParams: () => Promise<SetTokenURIParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=setTokenURI.d.ts.map