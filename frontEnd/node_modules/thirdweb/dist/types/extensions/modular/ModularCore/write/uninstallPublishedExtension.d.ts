import type { Chain } from "../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import type { ThirdwebContract } from "../../../../contract/contract.js";
/**
 * @extension MODULAR
 */
export type UninstallPublishedExtensionOptions = {
    client: ThirdwebClient;
    chain: Chain;
    contract: ThirdwebContract;
    extensionName: string;
    publisherAddress?: string;
    version?: string;
    constructorParams?: unknown[];
    extensionData?: `0x${string}`;
};
/**
 * Uninstall a published extension
 * @param options - The options for uninstalling a published extension
 * @returns A prepared transaction to send
 * @extension MODULAR
 * @example
 * ```ts
 * import { uninstallPublishedExtension } from "thirdweb/extensions/modular";
 * const transaction = uninstallPublishedExtension({
 *  client,
 *  chain,
 *  contract,
 *  extensionName: "MyExtension",
 *  publisherAddress: "0x...",
 * });
 * await sendTransaction({ transaction, account });
 * ```
 */
export declare function uninstallPublishedExtension(options: UninstallPublishedExtensionOptions): import("../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=uninstallPublishedExtension.d.ts.map