import type { Chain } from "../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import { type ThirdwebContract } from "../../../../contract/contract.js";
/**
 * @extension MODULAR
 */
export type UninstallExtensionByProxyOptions = {
    client: ThirdwebClient;
    chain: Chain;
    contract: ThirdwebContract;
    extensionProxyAddress: string;
    extensionData?: `0x${string}`;
};
/**
 * Uninstall an extension by proxy
 * @param options - The options for uninstalling an extension by proxy
 * @returns A prepared transaction to send
 * @extension MODULAR
 * @example
 * ```ts
 * import { uninstallExtensionByProxy } from "thirdweb/extensions/modular";
 * const transaction = uninstallExtensionByProxy({
 *  client,
 *  chain,
 *  contract,
 *  extensionProxyAddress: "0x...",
 * });
 * await sendTransaction({ transaction, account });
 * ```
 */
export declare function uninstallExtensionByProxy(options: UninstallExtensionByProxyOptions): import("../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=uninstallExtensionByProxy.d.ts.map