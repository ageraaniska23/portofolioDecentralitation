import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getProfileIdByHandleHash" function.
 */
export type GetProfileIdByHandleHashParams = {
    handleHash: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "handleHash";
    }>;
};
export declare const FN_SELECTOR: "0x19e14070";
/**
 * Checks if the `getProfileIdByHandleHash` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getProfileIdByHandleHash` method is supported.
 * @extension LENS
 * @example
 * ```ts
 * import { isGetProfileIdByHandleHashSupported } from "thirdweb/extensions/lens";
 *
 * const supported = await isGetProfileIdByHandleHashSupported(contract);
 * ```
 */
export declare function isGetProfileIdByHandleHashSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getProfileIdByHandleHash" function.
 * @param options - The options for the getProfileIdByHandleHash function.
 * @returns The encoded ABI parameters.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeGetProfileIdByHandleHashParams } "thirdweb/extensions/lens";
 * const result = encodeGetProfileIdByHandleHashParams({
 *  handleHash: ...,
 * });
 * ```
 */
export declare function encodeGetProfileIdByHandleHashParams(options: GetProfileIdByHandleHashParams): `0x${string}`;
/**
 * Encodes the "getProfileIdByHandleHash" function into a Hex string with its parameters.
 * @param options - The options for the getProfileIdByHandleHash function.
 * @returns The encoded hexadecimal string.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeGetProfileIdByHandleHash } "thirdweb/extensions/lens";
 * const result = encodeGetProfileIdByHandleHash({
 *  handleHash: ...,
 * });
 * ```
 */
export declare function encodeGetProfileIdByHandleHash(options: GetProfileIdByHandleHashParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the getProfileIdByHandleHash function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension LENS
 * @example
 * ```ts
 * import { decodeGetProfileIdByHandleHashResult } from "thirdweb/extensions/lens";
 * const result = decodeGetProfileIdByHandleHashResult("...");
 * ```
 */
export declare function decodeGetProfileIdByHandleHashResult(result: Hex): bigint;
/**
 * Calls the "getProfileIdByHandleHash" function on the contract.
 * @param options - The options for the getProfileIdByHandleHash function.
 * @returns The parsed result of the function call.
 * @extension LENS
 * @example
 * ```ts
 * import { getProfileIdByHandleHash } from "thirdweb/extensions/lens";
 *
 * const result = await getProfileIdByHandleHash({
 *  contract,
 *  handleHash: ...,
 * });
 *
 * ```
 */
export declare function getProfileIdByHandleHash(options: BaseTransactionOptions<GetProfileIdByHandleHashParams>): Promise<bigint>;
//# sourceMappingURL=getProfileIdByHandleHash.d.ts.map