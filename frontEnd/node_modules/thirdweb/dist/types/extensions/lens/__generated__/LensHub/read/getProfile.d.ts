import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getProfile" function.
 */
export type GetProfileParams = {
    profileId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "profileId";
    }>;
};
export declare const FN_SELECTOR: "0xf08f4f64";
/**
 * Checks if the `getProfile` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getProfile` method is supported.
 * @extension LENS
 * @example
 * ```ts
 * import { isGetProfileSupported } from "thirdweb/extensions/lens";
 *
 * const supported = await isGetProfileSupported(contract);
 * ```
 */
export declare function isGetProfileSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getProfile" function.
 * @param options - The options for the getProfile function.
 * @returns The encoded ABI parameters.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeGetProfileParams } "thirdweb/extensions/lens";
 * const result = encodeGetProfileParams({
 *  profileId: ...,
 * });
 * ```
 */
export declare function encodeGetProfileParams(options: GetProfileParams): `0x${string}`;
/**
 * Encodes the "getProfile" function into a Hex string with its parameters.
 * @param options - The options for the getProfile function.
 * @returns The encoded hexadecimal string.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeGetProfile } "thirdweb/extensions/lens";
 * const result = encodeGetProfile({
 *  profileId: ...,
 * });
 * ```
 */
export declare function encodeGetProfile(options: GetProfileParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the getProfile function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension LENS
 * @example
 * ```ts
 * import { decodeGetProfileResult } from "thirdweb/extensions/lens";
 * const result = decodeGetProfileResult("...");
 * ```
 */
export declare function decodeGetProfileResult(result: Hex): {
    pubCount: bigint;
    followModule: string;
    followNFT: string;
    __DEPRECATED__handle: string;
    __DEPRECATED__imageURI: string;
    __DEPRECATED__followNFTURI: string;
    metadataURI: string;
};
/**
 * Calls the "getProfile" function on the contract.
 * @param options - The options for the getProfile function.
 * @returns The parsed result of the function call.
 * @extension LENS
 * @example
 * ```ts
 * import { getProfile } from "thirdweb/extensions/lens";
 *
 * const result = await getProfile({
 *  contract,
 *  profileId: ...,
 * });
 *
 * ```
 */
export declare function getProfile(options: BaseTransactionOptions<GetProfileParams>): Promise<{
    pubCount: bigint;
    followModule: string;
    followNFT: string;
    __DEPRECATED__handle: string;
    __DEPRECATED__imageURI: string;
    __DEPRECATED__followNFTURI: string;
    metadataURI: string;
}>;
//# sourceMappingURL=getProfile.d.ts.map