import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getPublication" function.
 */
export type GetPublicationParams = {
    profileId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "profileId";
    }>;
    pubId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "pubId";
    }>;
};
export declare const FN_SELECTOR: "0x7385ebc9";
/**
 * Checks if the `getPublication` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getPublication` method is supported.
 * @extension LENS
 * @example
 * ```ts
 * import { isGetPublicationSupported } from "thirdweb/extensions/lens";
 *
 * const supported = await isGetPublicationSupported(contract);
 * ```
 */
export declare function isGetPublicationSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getPublication" function.
 * @param options - The options for the getPublication function.
 * @returns The encoded ABI parameters.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeGetPublicationParams } "thirdweb/extensions/lens";
 * const result = encodeGetPublicationParams({
 *  profileId: ...,
 *  pubId: ...,
 * });
 * ```
 */
export declare function encodeGetPublicationParams(options: GetPublicationParams): `0x${string}`;
/**
 * Encodes the "getPublication" function into a Hex string with its parameters.
 * @param options - The options for the getPublication function.
 * @returns The encoded hexadecimal string.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeGetPublication } "thirdweb/extensions/lens";
 * const result = encodeGetPublication({
 *  profileId: ...,
 *  pubId: ...,
 * });
 * ```
 */
export declare function encodeGetPublication(options: GetPublicationParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the getPublication function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension LENS
 * @example
 * ```ts
 * import { decodeGetPublicationResult } from "thirdweb/extensions/lens";
 * const result = decodeGetPublicationResult("...");
 * ```
 */
export declare function decodeGetPublicationResult(result: Hex): {
    pointedProfileId: bigint;
    pointedPubId: bigint;
    contentURI: string;
    referenceModule: string;
    __DEPRECATED__collectModule: string;
    __DEPRECATED__collectNFT: string;
    pubType: number;
    rootProfileId: bigint;
    rootPubId: bigint;
};
/**
 * Calls the "getPublication" function on the contract.
 * @param options - The options for the getPublication function.
 * @returns The parsed result of the function call.
 * @extension LENS
 * @example
 * ```ts
 * import { getPublication } from "thirdweb/extensions/lens";
 *
 * const result = await getPublication({
 *  contract,
 *  profileId: ...,
 *  pubId: ...,
 * });
 *
 * ```
 */
export declare function getPublication(options: BaseTransactionOptions<GetPublicationParams>): Promise<{
    pointedProfileId: bigint;
    pointedPubId: bigint;
    contentURI: string;
    referenceModule: string;
    __DEPRECATED__collectModule: string;
    __DEPRECATED__collectNFT: string;
    pubType: number;
    rootProfileId: bigint;
    rootPubId: bigint;
}>;
//# sourceMappingURL=getPublication.d.ts.map