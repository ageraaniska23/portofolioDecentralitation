import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "tokenDataOf" function.
 */
export type TokenDataOfParams = {
    tokenId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "tokenId";
    }>;
};
export declare const FN_SELECTOR: "0xc0da9bcd";
/**
 * Checks if the `tokenDataOf` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `tokenDataOf` method is supported.
 * @extension LENS
 * @example
 * ```ts
 * import { isTokenDataOfSupported } from "thirdweb/extensions/lens";
 *
 * const supported = await isTokenDataOfSupported(contract);
 * ```
 */
export declare function isTokenDataOfSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "tokenDataOf" function.
 * @param options - The options for the tokenDataOf function.
 * @returns The encoded ABI parameters.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeTokenDataOfParams } "thirdweb/extensions/lens";
 * const result = encodeTokenDataOfParams({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeTokenDataOfParams(options: TokenDataOfParams): `0x${string}`;
/**
 * Encodes the "tokenDataOf" function into a Hex string with its parameters.
 * @param options - The options for the tokenDataOf function.
 * @returns The encoded hexadecimal string.
 * @extension LENS
 * @example
 * ```ts
 * import { encodeTokenDataOf } "thirdweb/extensions/lens";
 * const result = encodeTokenDataOf({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeTokenDataOf(options: TokenDataOfParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the tokenDataOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension LENS
 * @example
 * ```ts
 * import { decodeTokenDataOfResult } from "thirdweb/extensions/lens";
 * const result = decodeTokenDataOfResult("...");
 * ```
 */
export declare function decodeTokenDataOfResult(result: Hex): {
    owner: string;
    mintTimestamp: bigint;
};
/**
 * Calls the "tokenDataOf" function on the contract.
 * @param options - The options for the tokenDataOf function.
 * @returns The parsed result of the function call.
 * @extension LENS
 * @example
 * ```ts
 * import { tokenDataOf } from "thirdweb/extensions/lens";
 *
 * const result = await tokenDataOf({
 *  contract,
 *  tokenId: ...,
 * });
 *
 * ```
 */
export declare function tokenDataOf(options: BaseTransactionOptions<TokenDataOfParams>): Promise<{
    owner: string;
    mintTimestamp: bigint;
}>;
//# sourceMappingURL=tokenDataOf.d.ts.map